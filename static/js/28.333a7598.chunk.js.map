{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/ArrowVegaLiteChart/styled-components.ts","../../../streamlit/frontend/src/components/elements/ArrowVegaLiteChart/ArrowVegaLiteChart.tsx"],"names":["StyledVegaLiteChartContainer","theme","zIndex","zIndices","popupMenu","summary","height","menuButton","MagicFields","DEFAULT_DATA_NAME","SUPPORTED_INDEX_TYPES","Set","IndexTypeName","DatetimeIndex","Float64Index","Int64Index","RangeIndex","UInt64Index","ArrowVegaLiteChart","vegaView","vegaFinalizer","defaultDataName","element","state","error","undefined","finalizeView","generateSpec","props","el","spec","JSON","parse","useContainerWidth","config","configWithThemeDefaults","width","padding","bottom","datasets","Error","this","createView","ensureError","setState","prevProps","prevElement","prevTheme","prevSpec","logMessage","prevData","data","updateData","prevDataSets","getDataSets","dataSets","Object","entries","name","dataset","datasetName","prevDataset","keys","hasOwnProperty","resize","runAsync","numRows","dimensions","prevNumRows","dataRows","prevNumCols","dataColumns","numCols","c","r","getDataValue","dataIsAnAppendOfPrev","insert","getDataArray","cs","vega","remove","change","_runtime","embed","vgSpec","view","finalize","getDataArrays","datasetNames","length","dataObj","getInlineData","data-testid","ref","PureComponent","dataProto","datasetArrays","forEach","x","hasName","startIndex","isEmpty","dataArr","rows","cols","indexType","Quiver","getTypeName","types","index","hasSupportedIndex","has","rowIndex","row","indexValue","getIndexValue","Number","colIndex","dataValue","columns","push","colors","fontSizes","genericFonts","themeFonts","labelFont","bodyFont","titleFont","labelFontSize","twoSmPx","titleFontSize","themeDefaults","background","bgColor","axis","labelColor","bodyText","titleColor","gridColor","fadedText10","legend","title","color","subtitleColor","header","merge","withTheme","withFullScreenWrapper"],"mappings":"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","file":"static/js/28.333a7598.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledVegaLiteChartContainer = styled.div(({ theme }) => ({\n  // These styles come from VegaLite Library\n  \"&.vega-embed\": {\n    \".vega-actions\": {\n      zIndex: theme.zIndices.popupMenu,\n    },\n    summary: {\n      // Fix weird floating button height issue in Vega Lite.\n      height: \"auto\",\n      // Fix floating button appearing above pop-ups.\n      zIndex: theme.zIndices.menuButton,\n    },\n  },\n}))\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { logMessage } from \"src/lib/log\"\nimport { merge } from \"lodash\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { ensureError } from \"src/lib/ErrorHandling\"\nimport { IndexTypeName, Quiver } from \"src/lib/Quiver\"\nimport { Theme } from \"src/theme\"\nimport embed from \"vega-embed\"\nimport * as vega from \"vega\"\nimport { StyledVegaLiteChartContainer } from \"./styled-components\"\n\nconst MagicFields = {\n  DATAFRAME_INDEX: \"(index)\",\n}\n\nconst DEFAULT_DATA_NAME = \"source\"\n\n/**\n * Horizontal space needed for the embed actions button.\n */\nconst EMBED_PADDING = 38\n\n/**\n * Fix bug where Vega Lite was vertically-cropping the x-axis in some cases.\n * For example, in e2e/scripts/add_rows.py\n */\nconst BOTTOM_PADDING = 20\n\n/** Types of dataframe-indices that are supported as x axis. */\nconst SUPPORTED_INDEX_TYPES = new Set([\n  IndexTypeName.DatetimeIndex,\n  IndexTypeName.Float64Index,\n  IndexTypeName.Int64Index,\n  IndexTypeName.RangeIndex,\n  IndexTypeName.UInt64Index,\n])\n\ninterface Props {\n  element: VegaLiteChartElement\n  theme: Theme\n  width: number\n}\n\n/** All of the data that makes up a VegaLite chart. */\nexport interface VegaLiteChartElement {\n  /**\n   * The dataframe that will be used as the chart's main data source, if\n   * specified using Vega-Lite's inline API.\n   *\n   * This is mutually exclusive with WrappedNamedDataset - if `data` is non-null,\n   * `datasets` will not be populated; if `datasets` is populated, then `data`\n   * will be null.\n   */\n  data: Quiver | null\n\n  /** The a JSON-formatted string with the Vega-Lite spec. */\n  spec: string\n\n  /**\n   * Dataframes associated with this chart using Vega-Lite's datasets API,\n   * if any.\n   */\n  datasets: WrappedNamedDataset[]\n\n  /** If True, will overwrite the chart width spec to fit to container. */\n  useContainerWidth: boolean\n}\n\n/** A mapping of `ArrowNamedDataSet.proto`. */\nexport interface WrappedNamedDataset {\n  /** The dataset's optional name. */\n  name: string | null\n\n  /** True if the name field (above) was manually set. */\n  hasName: boolean\n\n  /** The data itself, wrapped in a Quiver object. */\n  data: Quiver\n}\n\nexport interface PropsWithHeight extends Props {\n  height: number | undefined\n}\n\ninterface State {\n  error?: Error\n}\n\nexport class ArrowVegaLiteChart extends PureComponent<PropsWithHeight, State> {\n  /**\n   * The Vega view object\n   */\n  private vegaView?: vega.View\n\n  /**\n   * Finalizer for the embedded vega object. Must be called to dispose\n   * of the vegaView when it's no longer used.\n   */\n  private vegaFinalizer?: () => void\n\n  /**\n   * The default data name to add to.\n   */\n  private defaultDataName = DEFAULT_DATA_NAME\n\n  /**\n   * The html element we attach the Vega view to.\n   */\n  private element: HTMLDivElement | null = null\n\n  readonly state = {\n    error: undefined,\n  }\n\n  public async componentDidMount(): Promise<void> {\n    try {\n      await this.createView()\n    } catch (e) {\n      const error = ensureError(e)\n      this.setState({ error })\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.finalizeView()\n  }\n\n  /**\n   * Finalize the view so it can be garbage collected. This should be done\n   * when a new view is created, and when the component unmounts.\n   */\n  private finalizeView = (): any => {\n    if (this.vegaFinalizer) {\n      this.vegaFinalizer()\n    }\n    this.vegaFinalizer = undefined\n    this.vegaView = undefined\n  }\n\n  public async componentDidUpdate(prevProps: PropsWithHeight): Promise<void> {\n    const { element: prevElement, theme: prevTheme } = prevProps\n    const { element, theme } = this.props\n\n    const prevSpec = prevElement.spec\n    const { spec } = element\n\n    if (\n      !this.vegaView ||\n      prevSpec !== spec ||\n      prevTheme !== theme ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height\n    ) {\n      logMessage(\"Vega spec changed.\")\n      try {\n        await this.createView()\n      } catch (e) {\n        const error = ensureError(e)\n\n        this.setState({ error })\n      }\n      return\n    }\n\n    const prevData = prevElement.data\n    const { data } = element\n\n    if (prevData || data) {\n      this.updateData(this.defaultDataName, prevData, data)\n    }\n\n    const prevDataSets = getDataSets(prevElement) || {}\n    const dataSets = getDataSets(element) || {}\n\n    for (const [name, dataset] of Object.entries(dataSets)) {\n      const datasetName = name || this.defaultDataName\n      const prevDataset = prevDataSets[datasetName]\n\n      this.updateData(datasetName, prevDataset, dataset)\n    }\n\n    // Remove all datasets that are in the previous but not the current datasets.\n    for (const name of Object.keys(prevDataSets)) {\n      if (!dataSets.hasOwnProperty(name) && name !== this.defaultDataName) {\n        this.updateData(name, null, null)\n      }\n    }\n\n    this.vegaView.resize().runAsync()\n  }\n\n  public generateSpec = (): any => {\n    const { element: el, theme } = this.props\n    const spec = JSON.parse(el.spec)\n    const { useContainerWidth } = el\n\n    spec.config = configWithThemeDefaults(spec.config, theme)\n\n    if (this.props.height) {\n      // fullscreen\n      spec.width = this.props.width - EMBED_PADDING\n      spec.height = this.props.height\n    } else if (useContainerWidth) {\n      spec.width = this.props.width - EMBED_PADDING\n    }\n\n    if (!spec.padding) {\n      spec.padding = {}\n    }\n\n    if (spec.padding.bottom == null) {\n      spec.padding.bottom = BOTTOM_PADDING\n    }\n\n    if (spec.datasets) {\n      throw new Error(\"Datasets should not be passed as part of the spec\")\n    }\n\n    return spec\n  }\n\n  /**\n   * Update the dataset in the Vega view. This method tried to minimize changes\n   * by automatically creating and applying diffs.\n   *\n   * @param name The name of the dataset.\n   * @param prevData The dataset before the update.\n   * @param data The dataset at the current state.\n   */\n  private updateData(\n    name: string,\n    prevData: Quiver | null,\n    data: Quiver | null\n  ): void {\n    if (!this.vegaView) {\n      throw new Error(\"Chart has not been drawn yet\")\n    }\n\n    if (!data || data.data.numRows === 0) {\n      const view = this.vegaView as any\n      // eslint-disable-next-line no-underscore-dangle\n      const viewHasDataWithName = view._runtime.data.hasOwnProperty(name)\n      if (viewHasDataWithName) {\n        this.vegaView.remove(name, vega.truthy)\n      }\n      return\n    }\n\n    if (!prevData || prevData.data.numRows === 0) {\n      this.vegaView.insert(name, getDataArray(data))\n      return\n    }\n\n    const {\n      dataRows: prevNumRows,\n      dataColumns: prevNumCols,\n    } = prevData.dimensions\n    const { dataRows: numRows, dataColumns: numCols } = data.dimensions\n\n    // Check if dataframes have same \"shape\" but the new one has more rows.\n    if (\n      dataIsAnAppendOfPrev(\n        prevData,\n        prevNumRows,\n        prevNumCols,\n        data,\n        numRows,\n        numCols\n      )\n    ) {\n      if (prevNumRows < numRows) {\n        this.vegaView.insert(name, getDataArray(data, prevNumRows))\n      }\n    } else {\n      // Clean the dataset and insert from scratch.\n      const cs = vega\n        .changeset()\n        .remove(vega.truthy)\n        .insert(getDataArray(data))\n      this.vegaView.change(name, cs)\n      logMessage(\n        `Had to clear the ${name} dataset before inserting data through Vega view.`\n      )\n    }\n  }\n\n  /**\n   * Create a new Vega view and add the data.\n   */\n  private async createView(): Promise<void> {\n    logMessage(\"Creating a new Vega view.\")\n\n    if (!this.element) {\n      throw Error(\"Element missing.\")\n    }\n\n    // Finalize the previous view so it can be garbage collected.\n    this.finalizeView()\n\n    const el = this.props.element\n    const spec = this.generateSpec()\n    const { vgSpec, view, finalize } = await embed(this.element, spec)\n\n    this.vegaView = view\n    this.vegaFinalizer = finalize\n\n    const datasets = getDataArrays(el)\n\n    // Heuristic to determine the default dataset name.\n    const datasetNames = datasets ? Object.keys(datasets) : []\n    if (datasetNames.length === 1) {\n      const [datasetName] = datasetNames\n      this.defaultDataName = datasetName\n    } else if (datasetNames.length === 0 && vgSpec.data) {\n      this.defaultDataName = DEFAULT_DATA_NAME\n    }\n\n    const dataObj = getInlineData(el)\n    if (dataObj) {\n      view.insert(this.defaultDataName, dataObj)\n    }\n    if (datasets) {\n      for (const [name, data] of Object.entries(datasets)) {\n        view.insert(name, data)\n      }\n    }\n\n    await view.runAsync()\n\n    // Fix bug where the \"...\" menu button overlaps with charts where width is\n    // set to -1 on first load.\n    this.vegaView.resize().runAsync()\n  }\n\n  public render(): JSX.Element {\n    if (this.state.error) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw this.state.error\n    }\n\n    return (\n      // Create the container Vega draws inside.\n      <StyledVegaLiteChartContainer\n        data-testid=\"stArrowVegaLiteChart\"\n        ref={c => {\n          this.element = c\n        }}\n      />\n    )\n  }\n}\n\nfunction getInlineData(\n  el: VegaLiteChartElement\n): { [field: string]: any }[] | null {\n  const dataProto = el.data\n\n  if (!dataProto || dataProto.data.numRows === 0) {\n    return null\n  }\n\n  return getDataArray(dataProto)\n}\n\nfunction getDataArrays(\n  el: VegaLiteChartElement\n): { [dataset: string]: any[] } | null {\n  const datasets = getDataSets(el)\n  if (datasets == null) {\n    return null\n  }\n\n  const datasetArrays: { [dataset: string]: any[] } = {}\n\n  for (const [name, dataset] of Object.entries(datasets)) {\n    // @ts-ignore\n    datasetArrays[name] = getDataArray(dataset)\n  }\n\n  return datasetArrays\n}\n\nfunction getDataSets(\n  el: VegaLiteChartElement\n): { [dataset: string]: Quiver } | null {\n  if (el.datasets?.length === 0) {\n    return null\n  }\n\n  const datasets: { [dataset: string]: Quiver } = {}\n\n  el.datasets.forEach((x: WrappedNamedDataset) => {\n    if (!x) {\n      return\n    }\n    const name = x.hasName ? x.name : null\n    datasets[name as string] = x.data\n  })\n\n  return datasets\n}\n\nexport function getDataArray(\n  dataProto: Quiver,\n  startIndex = 0\n): { [field: string]: any }[] {\n  if (dataProto.isEmpty()) {\n    return []\n  }\n\n  const dataArr = []\n  const { dataRows: rows, dataColumns: cols } = dataProto.dimensions\n\n  const indexType = Quiver.getTypeName(dataProto.types.index[0])\n  const hasSupportedIndex = SUPPORTED_INDEX_TYPES.has(\n    indexType as IndexTypeName\n  )\n\n  for (let rowIndex = startIndex; rowIndex < rows; rowIndex++) {\n    const row: { [field: string]: any } = {}\n\n    if (hasSupportedIndex) {\n      const indexValue = dataProto.getIndexValue(rowIndex, 0)\n      // VegaLite can't handle BigInts, so they have to be converted to Numbers first\n      row[MagicFields.DATAFRAME_INDEX] =\n        typeof indexValue === \"bigint\" ? Number(indexValue) : indexValue\n    }\n\n    for (let colIndex = 0; colIndex < cols; colIndex++) {\n      const dataValue = dataProto.getDataValue(rowIndex, colIndex)\n      row[dataProto.columns[0][colIndex]] =\n        typeof dataValue === \"bigint\" ? Number(dataValue) : dataValue\n    }\n    dataArr.push(row)\n  }\n\n  return dataArr\n}\n\n/**\n * Checks if data looks like it's just prevData plus some appended rows.\n */\nfunction dataIsAnAppendOfPrev(\n  prevData: Quiver,\n  prevNumRows: number,\n  prevNumCols: number,\n  data: Quiver,\n  numRows: number,\n  numCols: number\n): boolean {\n  // Check whether dataframes have the same shape.\n\n  if (prevNumCols !== numCols) {\n    return false\n  }\n\n  if (prevNumRows >= numRows) {\n    return false\n  }\n\n  if (prevNumRows === 0) {\n    return false\n  }\n\n  const c = numCols - 1\n  const r = prevNumRows - 1\n\n  // Check if the new dataframe looks like it's a superset of the old one.\n  // (this is a very light check, and not guaranteed to be right!)\n  if (\n    prevData.getDataValue(0, c) !== data.getDataValue(0, c) ||\n    prevData.getDataValue(r, c) !== data.getDataValue(r, c)\n  ) {\n    return false\n  }\n\n  return true\n}\n\nfunction configWithThemeDefaults(config: any, theme: Theme): any {\n  const { colors, fontSizes, genericFonts } = theme\n  const themeFonts = {\n    labelFont: genericFonts.bodyFont,\n    titleFont: genericFonts.bodyFont,\n    labelFontSize: fontSizes.twoSmPx,\n    titleFontSize: fontSizes.twoSmPx,\n  }\n  const themeDefaults = {\n    background: colors.bgColor,\n    axis: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      gridColor: colors.fadedText10,\n      ...themeFonts,\n    },\n    legend: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    title: {\n      color: colors.bodyText,\n      subtitleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    header: {\n      labelColor: colors.bodyText,\n    },\n  }\n\n  if (!config) {\n    return themeDefaults\n  }\n\n  // Fill in theme defaults where the user didn't specify config options.\n  return merge({}, themeDefaults, config || {})\n}\n\nexport default withTheme(withFullScreenWrapper(ArrowVegaLiteChart))\n"],"sourceRoot":""}