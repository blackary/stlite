!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/stlite/",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function s(e){try{l(r.next(e))}catch(t){a(t)}}function i(e){try{l(r.throw(e))}catch(t){a(t)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((r=r.apply(e,t||[])).next())}))};let o,a,s;importScripts("https://cdn.jsdelivr.net/pyodide/v0.21.0/full/pyodide.js");const i=self;let l;const c=new Promise((e=>{l=e}));const g=function(){return r(this,void 0,void 0,(function*(){const{requirements:e,command:t,mainScriptData:n,mainScriptPath:r,wheels:l}=yield c;a=r,o=yield loadPyodide({stdout:console.log,stderr:console.error}),yield o.loadPackage(["micropip","ssl"]);const g=o.pyimport("micropip");yield g.install.callKwargs([l.tornado,l.pyarrow],{keep_going:!0}),yield g.install.callKwargs([l.streamlit],{keep_going:!0}),console.debug("Install the requirements:",e),yield g.install.callKwargs(e,{keep_going:!0}),yield o.runPythonAsync("\n    import importlib\n    importlib.invalidate_caches()\n  "),yield o.runPythonAsync("\n      import logging\n      import streamlit.logger\n\n      streamlit.logger.get_logger = logging.getLogger\n      streamlit.logger.setup_formatter = None\n      streamlit.logger.update_formatter = lambda *a, **k: None\n      streamlit.logger.set_log_level = lambda *a, **k: None\n  ");self.__logCallback__=e=>{e.startsWith("CRITICAL")||e.startsWith("ERROR")?console.error(e):e.startsWith("WARNING")?console.warn(e):e.startsWith("INFO")?console.info(e):e.startsWith("DEBUG")?console.debug(e):console.log(e)},yield o.runPythonAsync('\n      from js import __logCallback__\n\n\n      class JsHandler(logging.Handler):\n          def emit(self, record):\n              msg = self.format(record)\n              __logCallback__(msg)\n\n\n      main_formatter = logging.Formatter("%(levelname)s:%(name)s:%(message)s")\n\n      js_handler = JsHandler()\n      js_handler.setFormatter(main_formatter)\n\n      root_logger = logging.getLogger()\n      root_logger.handlers.clear()\n      root_logger.addHandler(js_handler)\n      root_logger.setLevel(logging.DEBUG)\n\n      streamlit_handler = logging.getLogger("streamlit")\n      streamlit_handler.setLevel(logging.DEBUG)\n  '),yield o.runPythonAsync('\n    import os\n    import streamlit\n    import streamlit.web.bootstrap as bootstrap\n\n\n    def _get_command_line_as_string():\n        return ""  # TODO\n\n\n    def _main_run(file, args=None, flag_options=None):\n        if args is None:\n            args = []\n\n        if flag_options is None:\n            flag_options = {}\n\n        command_line = _get_command_line_as_string()\n\n        # Set a global flag indicating that we\'re "within" streamlit.\n        streamlit._is_running_with_streamlit = True\n\n        # check_credentials()  # Disable credential check on Pyodide\n\n        bootstrap.run(file, command_line, args, flag_options)\n\n\n    def main_hello(**kwargs):\n        """Runs the Hello World script."""\n        from streamlit.hello import Hello\n\n        bootstrap.load_config_options(flag_options=kwargs)\n        filename = Hello.__file__\n        _main_run(filename, flag_options=kwargs)\n\n\n    ACCEPTED_FILE_EXTENSIONS = ("py", "py3")\n\n\n    def main_run(target, args=None, **kwargs):\n        """Run a Python script, piping stderr to Streamlit.\n\n        The script can be local or it can be an url. In the latter case, Streamlit\n        will download the script to a temporary file and runs this file.\n\n        """\n        from validators import url\n\n        bootstrap.load_config_options(flag_options=kwargs)\n\n        _, extension = os.path.splitext(target)\n        if extension[1:] not in ACCEPTED_FILE_EXTENSIONS:\n            if extension[1:] == "":\n                raise click.BadArgumentUsage(\n                    "Streamlit requires raw Python (.py) files, but the provided file has no extension.\\nFor more information, please see https://docs.streamlit.io"\n                )\n            else:\n                raise click.BadArgumentUsage(\n                    "Streamlit requires raw Python (.py) files, not %s.\\nFor more information, please see https://docs.streamlit.io"\n                    % extension\n                )\n\n        if url(target):\n            from streamlit.temporary_directory import TemporaryDirectory\n\n            with TemporaryDirectory() as temp_dir:\n                from urllib.parse import urlparse\n                from streamlit import url_util\n\n                path = urlparse(target).path\n                main_script_path = os.path.join(\n                    temp_dir, path.strip("/").rsplit("/", 1)[-1]\n                )\n                # if this is a GitHub/Gist blob url, convert to a raw URL first.\n                target = url_util.process_gitblob_url(target)\n                _download_remote(main_script_path, target)\n                _main_run(main_script_path, args, flag_options=kwargs)\n        else:\n            if not os.path.exists(target):\n                raise click.BadParameter("File does not exist: {}".format(target))\n            _main_run(target, args, flag_options=kwargs)\n  '),yield o.runPythonAsync('\n  command_kwargs = {\n      "server.headless": True,  # Not to open the browser after launching\n      "global.dataFrameSerialization": "legacy",  # Not to use PyArrow\n      "server.enableXsrfProtection": False,  # Disable XSRF protection as it relies on cookies\n      "browser.gatherUsageStats": False,\n  }\n  '),"hello"===t?yield o.runPythonAsync("main_hello(**command_kwargs)"):"run"===t&&(o.FS.writeFile(r,n,{encoding:"utf8"}),yield o.runPythonAsync(`main_run("${r}", **command_kwargs)`)),yield o.runPythonAsync("\n    from tornado.httpserver import HTTP_SERVER\n  "),s=o.globals.get("HTTP_SERVER").copy(),i.postMessage({type:"event:loaded"})}))}();self.onmessage=e=>r(void 0,void 0,void 0,(function*(){const t=e.data;if("initData"!==t.type)switch(yield g,t.type){case"websocket:connect":console.debug("websocket:connect",t.data),s.start_websocket("/stream",((e,t)=>{if(t){const t=e.getBuffer("u8");e.destroy();const n=new Uint8ClampedArray(t.data.buffer,t.data.byteOffset,t.data.byteLength);i.postMessage({type:"websocket:message",data:{payload:new Uint8Array(n)}})}else i.postMessage({type:"websocket:message",data:{payload:e}})}));break;case"websocket:send":{console.debug("websocket:send",t.data);const{payload:e}=t.data;s.receive_websocket_from_js(e);break}case"http:request":{console.debug("http:request",t.data);const{request:e,httpCommId:n}=t.data,r=(e,t,r)=>{const o=t.toJs(),a=r.toJs();console.debug({httpCommId:n,statusCode:e,headers:o,body:a}),i.postMessage({type:"http:response",data:{httpCommId:n,response:{statusCode:e,headers:o,body:a}}})};s.receive_http_from_js(e.method,e.path,e.headers,e.body,r);break}case"mainscript:set":{const{mainScriptData:e}=t.data;o.FS.writeFile(a,e,{encoding:"utf8"});break}case"install":{const n=e.ports[0],{requirements:r}=t.data,a=o.pyimport("micropip");console.debug("Install the requirements:",r),a.install.callKwargs(r,{keep_going:!0}).then((()=>{console.debug("Successfully installed"),n.postMessage({type:"reply"})})).catch((e=>{console.error("Failed to install",e),n.postMessage({type:"reply",error:e})}))}}else{if(null==l)throw new Error("Unexpectedly failed to pass the initial data");l(t.data)}})),i.postMessage({type:"event:start"})}]);
//# sourceMappingURL=worker.91cd5713.worker.js.map