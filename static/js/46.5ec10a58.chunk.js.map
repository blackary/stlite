{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/Slider/styled-components.ts","../../../streamlit/frontend/src/components/widgets/Slider/Slider.tsx"],"names":["StyledThumb","disabled","theme","alignItems","backgroundColor","colors","gray","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderTopStyle","borderBottomStyle","borderRightStyle","borderLeftStyle","boxShadow","display","height","radii","xl","justifyContent","width","transparentize","outline","StyledThumbValue","fontFamily","fonts","monospace","fontSize","fontSizes","sm","paddingBottom","spacing","twoThirdsSmFont","color","top","position","whiteSpace","transparent","lineHeight","lineHeights","base","fontWeight","StyledTickBar","none","paddingLeft","paddingRight","paddingTop","StyledTickBarItem","fadedText40","Slider","props","formClearHelper","FormClearHelper","state","sliderRef","React","createRef","thumbValueRef","commitWidgetValueDebounced","commitWidgetValue","source","widgetMgr","setDoubleArrayValue","element","value","onFormCleared","setState","default","fromUi","handleChange","renderThumb","forwardRef","ref","$value","$thumbIndex","formattedValue","formatValue","passThrough","pick","options","length","isDateTimeType","thumbValueAlignment","$disabled","aria-valuetext","className","data-testid","renderTickBar","max","min","debounce","bind","initialValue","storedValue","this","getDoubleArrayValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","start","end","dataType","SliderProto","DataType","DATETIME","DATE","TIME","format","moment","utc","sprintf","slider","current","thumb","sliderPosition","getBoundingClientRect","thumbPosition","style","left","right","manageFormClearListener","formId","label","help","TooltipIcon","content","placement","Placement","TOP_RIGHT","step","onChange","overrides","Root","Thumb","Tick","Track","InnerTrack","background","darkenedBgMix25","TickBar","PureComponent","withTheme"],"mappings":"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","file":"static/js/46.5ec10a58.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\n\nexport interface StyledSliderProps {\n  disabled: boolean\n}\n\nexport const StyledThumb = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    alignItems: \"center\",\n    backgroundColor: disabled ? theme.colors.gray : theme.colors.primary,\n    borderTopLeftRadius: \"100%\",\n    borderTopRightRadius: \"100%\",\n    borderBottomLeftRadius: \"100%\",\n    borderBottomRightRadius: \"100%\",\n    borderTopStyle: \"none\",\n    borderBottomStyle: \"none\",\n    borderRightStyle: \"none\",\n    borderLeftStyle: \"none\",\n    boxShadow: \"none\",\n    display: \"flex\",\n    height: theme.radii.xl,\n    justifyContent: \"center\",\n    width: theme.radii.xl,\n    \":focus\": {\n      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`,\n      outline: \"none\",\n    },\n  })\n)\n\nexport const StyledThumbValue = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    fontFamily: theme.fonts.monospace,\n    fontSize: theme.fontSizes.sm,\n    paddingBottom: theme.spacing.twoThirdsSmFont,\n    color: disabled ? theme.colors.gray : theme.colors.primary,\n    top: \"-22px\",\n    position: \"absolute\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: theme.colors.transparent,\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n  })\n)\n\nexport const StyledTickBar = styled.div(({ theme }) => ({\n  paddingBottom: theme.spacing.none,\n  paddingLeft: theme.spacing.none,\n  paddingRight: theme.spacing.none,\n  paddingTop: theme.spacing.twoThirdsSmFont,\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledTickBarItem = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n    fontSize: theme.fontSizes.sm,\n    fontFamily: theme.fonts.monospace,\n    color: disabled ? theme.colors.fadedText40 : \"inherit\",\n  })\n)\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { pick } from \"lodash\"\nimport { SharedProps, Slider as UISlider } from \"baseui/slider\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport { Slider as SliderProto } from \"src/autogen/proto\"\nimport { debounce } from \"src/lib/utils\"\nimport moment from \"moment\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { Theme } from \"src/theme\"\nimport {\n  StyledThumb,\n  StyledThumbValue,\n  StyledTickBar,\n  StyledTickBarItem,\n} from \"./styled-components\"\n\nconst DEBOUNCE_TIME_MS = 200\n\nexport interface Props {\n  disabled: boolean\n  element: SliderProto\n  theme: Theme\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number[]\n}\n\nclass Slider extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State\n\n  private sliderRef = React.createRef<HTMLDivElement>()\n\n  private thumbValueRef = React.createRef<HTMLDivElement>()\n\n  private readonly commitWidgetValueDebounced: (source: Source) => void\n\n  public constructor(props: Props) {\n    super(props)\n    this.commitWidgetValueDebounced = debounce(\n      DEBOUNCE_TIME_MS,\n      this.commitWidgetValue.bind(this)\n    )\n    this.state = { value: this.initialValue }\n  }\n\n  get initialValue(): number[] {\n    const storedValue = this.props.widgetMgr.getDoubleArrayValue(\n      this.props.element\n    )\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    // Check default thumb value's alignment vs. slider container\n    this.thumbValueAlignment()\n\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setDoubleArrayValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ value: this.props.element.default }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({ value }: { value: number[] }): void => {\n    this.setState({ value }, () =>\n      this.commitWidgetValueDebounced({ fromUi: true })\n    )\n  }\n\n  /**\n   * Return the value of the slider. This will either be an array with\n   * one value (for a single value slider), or an array with two\n   * values (for a range slider).\n   */\n  private get value(): number[] {\n    const { min, max } = this.props.element\n    const { value } = this.state\n    let start = value[0]\n    let end = value.length > 1 ? value[1] : value[0]\n    // Adjust the value if it's out of bounds.\n    if (start > end) {\n      start = end\n    }\n    if (start < min) {\n      start = min\n    }\n    if (start > max) {\n      start = max\n    }\n    if (end < min) {\n      end = min\n    }\n    if (end > max) {\n      end = max\n    }\n    return value.length > 1 ? [start, end] : [start]\n  }\n\n  private isDateTimeType(): boolean {\n    const { dataType } = this.props.element\n    return (\n      dataType === SliderProto.DataType.DATETIME ||\n      dataType === SliderProto.DataType.DATE ||\n      dataType === SliderProto.DataType.TIME\n    )\n  }\n\n  private formatValue(value: number): string {\n    const { format, options } = this.props.element\n    if (this.isDateTimeType()) {\n      // Python datetime uses microseconds, but JS & Moment uses milliseconds\n      // The timestamp is always set to the UTC timezone, even so, the actual timezone\n      // for this timestamp in the backend could be different.\n      // However, the frontend component does not need to know about the actual timezone.\n      return moment.utc(value / 1000).format(format)\n    }\n\n    if (options.length > 0) {\n      return sprintf(format, options[value])\n    }\n\n    return sprintf(format, value)\n  }\n\n  private thumbValueAlignment(): void {\n    const slider = this.sliderRef.current\n    const thumb = this.thumbValueRef.current\n\n    if (slider && thumb) {\n      const sliderPosition = slider.getBoundingClientRect()\n      const thumbPosition = thumb.getBoundingClientRect()\n\n      thumb.style.left = thumbPosition.left < sliderPosition.left ? \"0\" : \"\"\n      thumb.style.right = thumbPosition.right > sliderPosition.right ? \"0\" : \"\"\n    }\n  }\n\n  // eslint-disable-next-line react/display-name\n  private renderThumb = React.forwardRef<HTMLDivElement, SharedProps>(\n    (props: SharedProps, ref): JSX.Element => {\n      const { $value, $thumbIndex } = props\n      const formattedValue = this.formatValue($value[$thumbIndex])\n      const passThrough = pick(props, [\n        \"role\",\n        \"style\",\n        \"aria-valuemax\",\n        \"aria-valuemin\",\n        \"aria-valuenow\",\n        \"tabIndex\",\n        \"onKeyUp\",\n        \"onKeyDown\",\n        \"onMouseEnter\",\n        \"onMouseLeave\",\n        \"draggable\",\n      ])\n      const ariaValueText: Record<string, string> = {}\n\n      if (this.props.element.options.length > 0 || this.isDateTimeType()) {\n        ariaValueText[\"aria-valuetext\"] = formattedValue\n      }\n\n      // Check the thumb value's alignment vs. slider container\n      this.thumbValueAlignment()\n\n      return (\n        <StyledThumb\n          {...passThrough}\n          disabled={props.$disabled}\n          ref={ref}\n          aria-valuetext={formattedValue}\n        >\n          <StyledThumbValue\n            className=\"StyledThumbValue\"\n            data-testid=\"stThumbValue\"\n            disabled={props.$disabled}\n            ref={this.thumbValueRef}\n          >\n            {formattedValue}\n          </StyledThumbValue>\n        </StyledThumb>\n      )\n    }\n  )\n\n  private renderTickBar = (): JSX.Element => {\n    const { disabled, element } = this.props\n    const { max, min } = element\n\n    return (\n      <StyledTickBar data-testid=\"stTickBar\">\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMin\">\n          {this.formatValue(min)}\n        </StyledTickBarItem>\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMax\">\n          {this.formatValue(max)}\n        </StyledTickBarItem>\n      </StyledTickBar>\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { disabled, element, theme, width, widgetMgr } = this.props\n    const { colors, fonts, fontSizes, spacing } = theme\n    const style = { width }\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div ref={this.sliderRef} className=\"stSlider\" style={style}>\n        <WidgetLabel label={element.label} disabled={disabled}>\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UISlider\n          min={element.min}\n          max={element.max}\n          step={element.step}\n          value={this.value}\n          onChange={this.handleChange}\n          disabled={disabled}\n          overrides={{\n            Root: {\n              style: {\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            Thumb: this.renderThumb,\n            Tick: {\n              style: {\n                fontFamily: fonts.monospace,\n                fontSize: fontSizes.sm,\n              },\n            },\n            Track: {\n              style: {\n                paddingBottom: 0,\n                paddingLeft: 0,\n                paddingRight: 0,\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            InnerTrack: {\n              style: ({ $disabled }: SharedProps) => ({\n                height: \"4px\",\n                ...($disabled ? { background: colors.darkenedBgMix25 } : {}),\n              }),\n            },\n            TickBar: this.renderTickBar,\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Slider)\n"],"sourceRoot":""}