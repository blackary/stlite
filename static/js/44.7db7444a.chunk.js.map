{"version":3,"sources":["../../../streamlit/frontend/src/components/shared/Radio/Radio.tsx","../../../streamlit/frontend/src/components/widgets/Radio/Radio.tsx"],"names":["Radio","state","value","props","onChange","e","selectedIndex","parseInt","target","setState","prevProps","this","theme","width","help","label","horizontal","disabled","colors","radii","style","options","length","push","className","TooltipIcon","content","placement","Placement","TOP_RIGHT","toString","align","ALIGN","vertical","map","option","index","overrides","Root","marginBottom","marginTop","marginRight","paddingLeft","alignItems","paddingRight","backgroundColor","$isFocusVisible","darkenedBgMix25","borderTopLeftRadius","md","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","RadioMarkOuter","height","$checked","primary","fadedText40","RadioMarkInner","Label","color","bodyText","position","top","React","PureComponent","withTheme","formClearHelper","FormClearHelper","initialValue","commitWidgetValue","source","widgetMgr","setIntValue","element","onFormCleared","default","fromUi","storedValue","getIntValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","manageFormClearListener","formId"],"mappings":"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","file":"static/js/44.7db7444a.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { Radio as UIRadio, RadioGroup, ALIGN } from \"baseui/radio\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelpInline,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { Theme } from \"src/theme\"\n\nexport interface Props {\n  disabled: boolean\n  horizontal: boolean\n  theme: Theme\n  width?: number\n  value: number\n  onChange: (selectedIndex: number) => any\n  options: any[]\n  label?: string\n  help?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Radio extends React.PureComponent<Props, State> {\n  public state: State = {\n    value: this.props.value,\n  }\n\n  public componentDidUpdate(prevProps: Props): void {\n    // If props.value has changed, re-initialize state.value.\n    if (\n      prevProps.value !== this.props.value &&\n      this.props.value !== this.state.value\n    ) {\n      this.setState({ value: this.props.value })\n    }\n  }\n\n  private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const selectedIndex = parseInt(e.target.value, 10)\n    this.setState({ value: selectedIndex }, () =>\n      this.props.onChange(selectedIndex)\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { theme, width, help, label, horizontal } = this.props\n    let { disabled } = this.props\n    const { colors, radii } = theme\n    const style = { width }\n    const options = [...this.props.options]\n\n    if (options.length === 0) {\n      options.push(\"No options to select.\")\n      disabled = true\n    }\n\n    return (\n      <div className=\"row-widget stRadio\" style={style}>\n        <WidgetLabel label={label} disabled={disabled}>\n          {help && (\n            <StyledWidgetLabelHelpInline>\n              <TooltipIcon content={help} placement={Placement.TOP_RIGHT} />\n            </StyledWidgetLabelHelpInline>\n          )}\n        </WidgetLabel>\n        <RadioGroup\n          onChange={this.onChange}\n          value={this.state.value.toString()}\n          disabled={disabled}\n          align={horizontal ? ALIGN.horizontal : ALIGN.vertical}\n        >\n          {options.map((option: string, index: number) => (\n            <UIRadio\n              key={index}\n              value={index.toString()}\n              overrides={{\n                Root: {\n                  style: ({\n                    $isFocusVisible,\n                  }: {\n                    $isFocusVisible: boolean\n                  }) => ({\n                    marginBottom: 0,\n                    marginTop: 0,\n                    marginRight: \"1rem\",\n                    // Make left and right padding look the same visually.\n                    paddingLeft: 0,\n                    alignItems: \"start\",\n                    paddingRight: \"2px\",\n                    backgroundColor: $isFocusVisible\n                      ? colors.darkenedBgMix25\n                      : \"\",\n                    borderTopLeftRadius: radii.md,\n                    borderTopRightRadius: radii.md,\n                    borderBottomLeftRadius: radii.md,\n                    borderBottomRightRadius: radii.md,\n                  }),\n                },\n                RadioMarkOuter: {\n                  style: ({ $checked }: { $checked: boolean }) => ({\n                    width: \"1rem\",\n                    height: \"1rem\",\n                    marginTop: \"0.35rem\",\n                    marginRight: \"0\",\n                    backgroundColor:\n                      $checked && !disabled\n                        ? colors.primary\n                        : colors.fadedText40,\n                  }),\n                },\n                RadioMarkInner: {\n                  style: ({ $checked }: { $checked: boolean }) => ({\n                    height: $checked ? \"6px\" : \".75rem\",\n                    width: $checked ? \"6px\" : \".75rem\",\n                  }),\n                },\n                Label: {\n                  style: {\n                    color: disabled ? colors.fadedText40 : colors.bodyText,\n                    position: \"relative\",\n                    top: \"1px\",\n                  },\n                },\n              }}\n            >\n              {option}\n            </UIRadio>\n          ))}\n        </RadioGroup>\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Radio)\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport UIRadio from \"src/components/shared/Radio\"\nimport { Radio as RadioProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\n\nexport interface Props {\n  disabled: boolean\n  element: RadioProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Radio extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setIntValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ value: this.props.element.default }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (selectedIndex: number): void => {\n    this.setState({ value: selectedIndex }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { disabled, element, width, widgetMgr } = this.props\n    const { horizontal, options, label, help } = element\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UIRadio\n        label={label}\n        onChange={this.onChange}\n        options={options}\n        width={width}\n        disabled={disabled}\n        horizontal={horizontal}\n        value={this.state.value}\n        help={help}\n      />\n    )\n  }\n}\n\nexport default Radio\n"],"sourceRoot":""}