{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/Video/Video.tsx"],"names":["Video","element","width","videoRef","useRef","getBaseUriParts","useContext","AppContext","type","rawUrl","url","useStliteMediaObjectUrl","useEffect","videoNode","current","setStartTime","currentTime","startTime","addEventListener","removeEventListener","VideoProto","Type","YOUTUBE_IFRAME","height","title","src","getYoutubeSrc","frameBorder","allow","allowFullScreen","ref","controls","buildMediaUri","className","style"],"mappings":";+MA4Be,SAASA,EAAT,GAA8D,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,MACjCC,EAAWC,iBAAyB,MAClCC,EAAoBC,qBAAWC,KAA/BF,gBAIAG,EAAsBP,EAAtBO,KAAWC,EAAWR,EAAhBS,IACRA,EAAMC,YAAwBF,GAEpCG,qBAAU,WACR,IAAMC,EAAYV,EAASW,QAErBC,EAA2B,WAC3BF,IACFA,EAAUG,YAAcf,EAAQgB,YAQpC,OAJIJ,GACFA,EAAUK,iBAAiB,iBAAkBH,GAGxC,WACDF,GACFA,EAAUM,oBAAoB,iBAAkBJ,MAGnD,CAACd,IAaJ,GAAIO,IAASY,IAAWC,KAAKC,eAAgB,CAC3C,IAAMC,EAAiB,IAARrB,EAEf,OACE,wBACEsB,MAAOd,EACPe,IAjBgB,SAACf,GAAyB,IACtCO,EAAchB,EAAdgB,UACR,OAAIA,EACI,GAAN,OAAUP,EAAV,kBAAuBO,GAElBP,EAYEgB,CAAchB,GACnBR,MAAOA,EACPqB,OAAQA,EACRI,YAAY,IACZC,MAAM,4BACNC,iBAAe,IAKrB,OACE,uBACEC,IAAK3B,EACL4B,UAAQ,EACRN,IAAKO,YAActB,EAAKL,KACxB4B,UAAU,UACVC,MAAO,CAAEhC","file":"static/js/37.55878adf.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useContext, useEffect, useRef } from \"react\"\nimport AppContext from \"src/components/core/AppContext\"\nimport { Video as VideoProto } from \"src/autogen/proto\"\nimport { buildMediaUri } from \"src/lib/UriUtil\"\nimport { useStliteMediaObjectUrl } from \"@stlite/stlite-kernel\"\n\nexport interface VideoProps {\n  width: number\n  element: VideoProto\n}\n\nexport default function Video({ element, width }: VideoProps): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const { getBaseUriParts } = useContext(AppContext)\n\n  /* Element may contain \"url\" or \"data\" property. */\n\n  const { type, url: rawUrl } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime } = element\n    if (startTime) {\n      return `${url}?start=${startTime}`\n    }\n    return url\n  }\n\n  /* Is this a YouTube link? If so we need a fancier tag.\n       NOTE: This part assumes the URL is already an \"embed\" link.\n    */\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    const height = width * 0.75\n\n    return (\n      <iframe\n        title={url}\n        src={getYoutubeSrc(url)}\n        width={width}\n        height={height}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  return (\n    <video\n      ref={videoRef}\n      controls\n      src={buildMediaUri(url, getBaseUriParts())}\n      className=\"stVideo\"\n      style={{ width }}\n    />\n  )\n}\n"],"sourceRoot":""}