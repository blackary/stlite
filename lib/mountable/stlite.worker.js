!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="https://whitphx.github.io/stlite/lib/mountable/",n(n.s=2)}([function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var o=e[r];"."===o?e.splice(r,1):".."===o?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var a=i>=0?arguments[i]:e.cwd();if("string"!==typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(t=a+"/"+t,o="/"===a.charAt(0))}return(o?"/":"")+(t=n(r(t.split("/"),(function(e){return!!e})),!o).join("/"))||"."},t.normalize=function(e){var i=t.isAbsolute(e),a="/"===o(e,-1);return(e=n(r(e.split("/"),(function(e){return!!e})),!i).join("/"))||i||(e="."),e&&a&&(e+="/"),(i?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,(function(e,t){if("string"!==typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var o=r(e.split("/")),i=r(n.split("/")),a=Math.min(o.length,i.length),s=a,l=0;l<a;l++)if(o[l]!==i[l]){s=l;break}var c=[];for(l=s;l<o.length;l++)c.push("..");return(c=c.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!==typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,o=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!o){r=i;break}}else o=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},t.basename=function(e,t){var n=function(e){"string"!==typeof e&&(e+="");var t,n=0,r=-1,o=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!o){n=t+1;break}}else-1===r&&(o=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!==typeof e&&(e+="");for(var t=-1,n=0,r=-1,o=!0,i=0,a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(47!==s)-1===r&&(o=!1,r=a+1),46===s?-1===t?t=a:1!==i&&(i=1):-1!==t&&(i=-1);else if(!o){n=a+1;break}}return-1===t||-1===r||0===i||1===i&&t===r-1&&t===n+1?"":e.slice(t,r)};var o="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(1))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"===typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"===typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],u=!1,f=-1;function g(){u&&l&&(u=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!u){var e=s(g);u=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||u||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){var n;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"===typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}n.r(t);var i=n(0),a=n.n(i);var s=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(t){i(t)}}function s(e){try{l(r.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))};let l,c,u;importScripts("https://cdn.jsdelivr.net/pyodide/v0.21.0/full/pyodide.js");const f=self;let g;const p=new Promise((e=>{g=e}));const d=function(){return s(this,void 0,void 0,(function*(){const{requirements:e,command:t,mainScriptData:n,mainScriptPath:r,wheels:i,files:s}=yield p;c=r,l=yield loadPyodide({stdout:console.log,stderr:console.error}),Object.keys(s).forEach((e=>{const{data:t,opts:n}=s[e];console.debug(`Write a file "${e}"`),function(e,t,n,r){var i,s=a.a.normalize(t),l=[],c=o(a.a.dirname(s).split("/"));try{for(c.s();!(i=c.n()).done;){var u=i.value;l.push(u);var f=l.join("/");if(e.FS.analyzePath(f).exists){if(e.FS.isDir(f))throw new Error('"'.concat(f,'" already exists and is not a directory.'))}else try{e.FS.mkdir(f)}catch(g){throw console.error('Failed to create a directory "'.concat(f,'"')),g}}}catch(g){c.e(g)}finally{c.f()}e.FS.writeFile(t,n,r)}(l,e,t,n)})),yield l.loadPackage(["micropip","ssl"]);const g=l.pyimport("micropip");yield g.install.callKwargs([i.tornado,i.pyarrow],{keep_going:!0}),yield g.install.callKwargs([i.streamlit],{keep_going:!0}),console.debug("Install the requirements:",e),yield g.install.callKwargs(e,{keep_going:!0}),yield l.runPythonAsync("\n    import importlib\n    importlib.invalidate_caches()\n  "),yield l.runPythonAsync("\n      import logging\n      import streamlit.logger\n\n      streamlit.logger.get_logger = logging.getLogger\n      streamlit.logger.setup_formatter = None\n      streamlit.logger.update_formatter = lambda *a, **k: None\n      streamlit.logger.set_log_level = lambda *a, **k: None\n  ");self.__logCallback__=e=>{e.startsWith("CRITICAL")||e.startsWith("ERROR")?console.error(e):e.startsWith("WARNING")?console.warn(e):e.startsWith("INFO")?console.info(e):e.startsWith("DEBUG")?console.debug(e):console.log(e)},yield l.runPythonAsync('\n      from js import __logCallback__\n\n\n      class JsHandler(logging.Handler):\n          def emit(self, record):\n              msg = self.format(record)\n              __logCallback__(msg)\n\n\n      main_formatter = logging.Formatter("%(levelname)s:%(name)s:%(message)s")\n\n      js_handler = JsHandler()\n      js_handler.setFormatter(main_formatter)\n\n      root_logger = logging.getLogger()\n      root_logger.handlers.clear()\n      root_logger.addHandler(js_handler)\n      root_logger.setLevel(logging.DEBUG)\n\n      streamlit_handler = logging.getLogger("streamlit")\n      streamlit_handler.setLevel(logging.DEBUG)\n  '),yield l.runPythonAsync('\n    import os\n    import streamlit\n    import streamlit.web.bootstrap as bootstrap\n\n\n    def _get_command_line_as_string():\n        return ""  # TODO\n\n\n    def _main_run(file, args=None, flag_options=None):\n        if args is None:\n            args = []\n\n        if flag_options is None:\n            flag_options = {}\n\n        command_line = _get_command_line_as_string()\n\n        # Set a global flag indicating that we\'re "within" streamlit.\n        streamlit._is_running_with_streamlit = True\n\n        # check_credentials()  # Disable credential check on Pyodide\n\n        bootstrap.run(file, command_line, args, flag_options)\n\n\n    def main_hello(**kwargs):\n        """Runs the Hello World script."""\n        from streamlit.hello import Hello\n\n        bootstrap.load_config_options(flag_options=kwargs)\n        filename = Hello.__file__\n        _main_run(filename, flag_options=kwargs)\n\n\n    ACCEPTED_FILE_EXTENSIONS = ("py", "py3")\n\n\n    def main_run(target, args=None, **kwargs):\n        """Run a Python script, piping stderr to Streamlit.\n\n        The script can be local or it can be an url. In the latter case, Streamlit\n        will download the script to a temporary file and runs this file.\n\n        """\n        from validators import url\n\n        bootstrap.load_config_options(flag_options=kwargs)\n\n        _, extension = os.path.splitext(target)\n        if extension[1:] not in ACCEPTED_FILE_EXTENSIONS:\n            if extension[1:] == "":\n                raise click.BadArgumentUsage(\n                    "Streamlit requires raw Python (.py) files, but the provided file has no extension.\\nFor more information, please see https://docs.streamlit.io"\n                )\n            else:\n                raise click.BadArgumentUsage(\n                    "Streamlit requires raw Python (.py) files, not %s.\\nFor more information, please see https://docs.streamlit.io"\n                    % extension\n                )\n\n        if url(target):\n            from streamlit.temporary_directory import TemporaryDirectory\n\n            with TemporaryDirectory() as temp_dir:\n                from urllib.parse import urlparse\n                from streamlit import url_util\n\n                path = urlparse(target).path\n                main_script_path = os.path.join(\n                    temp_dir, path.strip("/").rsplit("/", 1)[-1]\n                )\n                # if this is a GitHub/Gist blob url, convert to a raw URL first.\n                target = url_util.process_gitblob_url(target)\n                _download_remote(main_script_path, target)\n                _main_run(main_script_path, args, flag_options=kwargs)\n        else:\n            if not os.path.exists(target):\n                raise click.BadParameter("File does not exist: {}".format(target))\n            _main_run(target, args, flag_options=kwargs)\n  '),yield l.runPythonAsync('\n  command_kwargs = {\n      "server.headless": True,  # Not to open the browser after launching\n      "global.dataFrameSerialization": "legacy",  # Not to use PyArrow\n      "server.enableXsrfProtection": False,  # Disable XSRF protection as it relies on cookies\n      "browser.gatherUsageStats": False,\n  }\n  '),"hello"===t?yield l.runPythonAsync("main_hello(**command_kwargs)"):"run"===t&&(l.FS.writeFile(r,n,{encoding:"utf8"}),yield l.runPythonAsync(`main_run("${r}", **command_kwargs)`)),yield l.runPythonAsync("\n    from tornado.httpserver import HTTP_SERVER\n  "),u=l.globals.get("HTTP_SERVER").copy(),f.postMessage({type:"event:loaded"})}))}();self.onmessage=e=>s(void 0,void 0,void 0,(function*(){const t=e.data;if("initData"!==t.type)switch(yield d,t.type){case"websocket:connect":console.debug("websocket:connect",t.data),u.start_websocket("/stream",((e,t)=>{if(t){const t=e.getBuffer("u8");e.destroy();const n=new Uint8ClampedArray(t.data.buffer,t.data.byteOffset,t.data.byteLength);f.postMessage({type:"websocket:message",data:{payload:new Uint8Array(n)}})}else f.postMessage({type:"websocket:message",data:{payload:e}})}));break;case"websocket:send":{console.debug("websocket:send",t.data);const{payload:e}=t.data;u.receive_websocket_from_js(e);break}case"http:request":{console.debug("http:request",t.data);const{request:e,httpCommId:n}=t.data,r=(e,t,r)=>{const o=t.toJs(),i=r.toJs();console.debug({httpCommId:n,statusCode:e,headers:o,body:i}),f.postMessage({type:"http:response",data:{httpCommId:n,response:{statusCode:e,headers:o,body:i}}})};u.receive_http_from_js(e.method,e.path,e.headers,e.body,r);break}case"mainscript:set":{const{mainScriptData:e}=t.data;l.FS.writeFile(c,e,{encoding:"utf8"});break}case"install":{const n=e.ports[0],{requirements:r}=t.data,o=l.pyimport("micropip");console.debug("Install the requirements:",r),o.install.callKwargs(r,{keep_going:!0}).then((()=>{console.debug("Successfully installed"),n.postMessage({type:"reply"})})).catch((e=>{console.error("Failed to install",e),n.postMessage({type:"reply",error:e})}))}}else{if(null==g)throw new Error("Unexpectedly failed to pass the initial data");g(t.data)}})),f.postMessage({type:"event:start"})}]);
//# sourceMappingURL=stlite.worker.js.map