{"version":3,"sources":["../webpack/bootstrap","../../stlite-kernel/dist/worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","pyodide","_mainScriptPath","httpServer","importScripts","ctx","self","setInitData","initDataPromise","pyodideReadyPromise","requirements","command","mainScriptData","mainScriptPath","wheels","loadPyodide","stdout","console","log","stderr","error","loadPackage","micropip","pyimport","install","callKwargs","tornado","pyarrow","keep_going","streamlit","debug","runPythonAsync","__logCallback__","msg","startsWith","warn","info","FS","writeFile","encoding","globals","copy","postMessage","type","loadPyodideAndPackages","onmessage","event","data","start_websocket","messageProxy","binary","buffer","getBuffer","destroy","payload","Uint8ClampedArray","byteOffset","byteLength","Uint8Array","receive_websocket_from_js","request","httpCommId","onResponse","statusCode","_headers","_body","headers","toJs","body","response","receive_http_from_js","method","path","messagePort","ports","catch","Error"],"mappings":"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","file":"stlite.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://whitphx.github.io/stlite/lib/mountable/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimportScripts(\"https://cdn.jsdelivr.net/pyodide/v0.21.0/full/pyodide.js\");\nlet pyodide;\nlet _mainScriptPath;\nlet httpServer;\n// Ref: https://v4.webpack.js.org/loaders/worker-loader/#loading-with-worker-loader\nconst ctx = self;\n/**\n * A promise waiting for the initial data to be sent from the main thread.\n */\nlet setInitData = undefined;\nconst initDataPromise = new Promise((resolve) => {\n    setInitData = resolve;\n});\n/**\n * Load Pyodided and initialize the interpreter.\n *\n * NOTE: This implementation is based on JupyterLite@v0.1.0a16.\n *       Since v0.1.0a17, a wrapper around micropip, piplite, has been introduced\n *       and the importing strategy of pyolite and other packages has been changed.\n *       We might need to catch up it.\n *       https://github.com/jupyterlite/jupyterlite/pull/310\n */\nfunction loadPyodideAndPackages() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { requirements, command, mainScriptData, mainScriptPath, wheels } = yield initDataPromise;\n        _mainScriptPath = mainScriptPath;\n        // as of 0.17.0 indexURL must be provided\n        pyodide = yield loadPyodide({\n            stdout: console.log,\n            stderr: console.error,\n        });\n        yield pyodide.loadPackage([\n            \"micropip\",\n            \"ssl\", // TODO: This package is only to be loaded from tornado, but it is not actually used. So this should be replaced with a lightweight mock.\n        ]);\n        const micropip = pyodide.pyimport(\"micropip\");\n        yield micropip.install.callKwargs([wheels.tornado, wheels.pyarrow], {\n            keep_going: true,\n        });\n        yield micropip.install.callKwargs([wheels.streamlit], { keep_going: true });\n        console.debug(\"Install the requirements:\", requirements);\n        yield micropip.install.callKwargs(requirements, { keep_going: true });\n        // The following code is necessary to avoid errors like  `NameError: name '_imp' is not defined`\n        // at importing installed packages.\n        yield pyodide.runPythonAsync(`\n    import importlib\n    importlib.invalidate_caches()\n  `);\n        // Fix the Streamlit's logger instantiating strategy, which violates the standard and is problematic for us.\n        // See https://github.com/streamlit/streamlit/issues/4742\n        yield pyodide.runPythonAsync(`\n      import logging\n      import streamlit.logger\n\n      streamlit.logger.get_logger = logging.getLogger\n      streamlit.logger.setup_formatter = None\n      streamlit.logger.update_formatter = lambda *a, **k: None\n      streamlit.logger.set_log_level = lambda *a, **k: None\n  `);\n        // Then configure the logger.\n        const logCallback = (msg) => {\n            if (msg.startsWith(\"CRITICAL\") || msg.startsWith(\"ERROR\")) {\n                console.error(msg);\n            }\n            else if (msg.startsWith(\"WARNING\")) {\n                console.warn(msg);\n            }\n            else if (msg.startsWith(\"INFO\")) {\n                console.info(msg);\n            }\n            else if (msg.startsWith(\"DEBUG\")) {\n                console.debug(msg);\n            }\n            else {\n                console.log(msg);\n            }\n        };\n        self.__logCallback__ = logCallback;\n        yield pyodide.runPythonAsync(`\n      from js import __logCallback__\n\n\n      class JsHandler(logging.Handler):\n          def emit(self, record):\n              msg = self.format(record)\n              __logCallback__(msg)\n\n\n      main_formatter = logging.Formatter(\"%(levelname)s:%(name)s:%(message)s\")\n\n      js_handler = JsHandler()\n      js_handler.setFormatter(main_formatter)\n\n      root_logger = logging.getLogger()\n      root_logger.handlers.clear()\n      root_logger.addHandler(js_handler)\n      root_logger.setLevel(logging.DEBUG)\n\n      streamlit_handler = logging.getLogger(\"streamlit\")\n      streamlit_handler.setLevel(logging.DEBUG)\n  `);\n        // Emulate the process in streamlit/web/cli.py\n        yield pyodide.runPythonAsync(`\n    import os\n    import streamlit\n    import streamlit.web.bootstrap as bootstrap\n\n\n    def _get_command_line_as_string():\n        return \"\"  # TODO\n\n\n    def _main_run(file, args=None, flag_options=None):\n        if args is None:\n            args = []\n\n        if flag_options is None:\n            flag_options = {}\n\n        command_line = _get_command_line_as_string()\n\n        # Set a global flag indicating that we're \"within\" streamlit.\n        streamlit._is_running_with_streamlit = True\n\n        # check_credentials()  # Disable credential check on Pyodide\n\n        bootstrap.run(file, command_line, args, flag_options)\n\n\n    def main_hello(**kwargs):\n        \"\"\"Runs the Hello World script.\"\"\"\n        from streamlit.hello import Hello\n\n        bootstrap.load_config_options(flag_options=kwargs)\n        filename = Hello.__file__\n        _main_run(filename, flag_options=kwargs)\n\n\n    ACCEPTED_FILE_EXTENSIONS = (\"py\", \"py3\")\n\n\n    def main_run(target, args=None, **kwargs):\n        \"\"\"Run a Python script, piping stderr to Streamlit.\n\n        The script can be local or it can be an url. In the latter case, Streamlit\n        will download the script to a temporary file and runs this file.\n\n        \"\"\"\n        from validators import url\n\n        bootstrap.load_config_options(flag_options=kwargs)\n\n        _, extension = os.path.splitext(target)\n        if extension[1:] not in ACCEPTED_FILE_EXTENSIONS:\n            if extension[1:] == \"\":\n                raise click.BadArgumentUsage(\n                    \"Streamlit requires raw Python (.py) files, but the provided file has no extension.\\\\nFor more information, please see https://docs.streamlit.io\"\n                )\n            else:\n                raise click.BadArgumentUsage(\n                    \"Streamlit requires raw Python (.py) files, not %s.\\\\nFor more information, please see https://docs.streamlit.io\"\n                    % extension\n                )\n\n        if url(target):\n            from streamlit.temporary_directory import TemporaryDirectory\n\n            with TemporaryDirectory() as temp_dir:\n                from urllib.parse import urlparse\n                from streamlit import url_util\n\n                path = urlparse(target).path\n                main_script_path = os.path.join(\n                    temp_dir, path.strip(\"/\").rsplit(\"/\", 1)[-1]\n                )\n                # if this is a GitHub/Gist blob url, convert to a raw URL first.\n                target = url_util.process_gitblob_url(target)\n                _download_remote(main_script_path, target)\n                _main_run(main_script_path, args, flag_options=kwargs)\n        else:\n            if not os.path.exists(target):\n                raise click.BadParameter(\"File does not exist: {}\".format(target))\n            _main_run(target, args, flag_options=kwargs)\n  `);\n        // Bootstrap\n        yield pyodide.runPythonAsync(`\n  command_kwargs = {\n      \"server.headless\": True,  # Not to open the browser after launching\n      \"global.dataFrameSerialization\": \"legacy\",  # Not to use PyArrow\n      \"server.enableXsrfProtection\": False,  # Disable XSRF protection as it relies on cookies\n  }\n  `);\n        if (command === \"hello\") {\n            yield pyodide.runPythonAsync(`main_hello(**command_kwargs)`);\n        }\n        else if (command === \"run\") {\n            pyodide.FS.writeFile(mainScriptPath, mainScriptData, { encoding: \"utf8\" });\n            yield pyodide.runPythonAsync(`main_run(\"${mainScriptPath}\", **command_kwargs)`);\n        }\n        // Pull the http server instance from Python world to JS world and set up it.\n        yield pyodide.runPythonAsync(`\n    from tornado.httpserver import HTTP_SERVER\n  `); // HTTP_SERVER is set AFTER the streamlit module is loaded.\n        httpServer = pyodide.globals.get(\"HTTP_SERVER\").copy();\n        ctx.postMessage({\n            type: \"event:loaded\",\n        });\n    });\n}\nconst pyodideReadyPromise = loadPyodideAndPackages();\n/**\n * Process a message sent to the worker.\n *\n * @param event The message event to process\n */\nself.onmessage = (event) => __awaiter(void 0, void 0, void 0, function* () {\n    const data = event.data;\n    // Special case for transmitting the initial data\n    if (data.type === \"initData\") {\n        if (setInitData == null) {\n            throw new Error(\"Unexpectedly failed to pass the initial data\");\n        }\n        setInitData(data.data);\n        return;\n    }\n    yield pyodideReadyPromise;\n    switch (data.type) {\n        case \"websocket:connect\": {\n            console.debug(\"websocket:connect\", data.data);\n            httpServer.start_websocket(\"/stream\", (messageProxy, binary) => {\n                // XXX: Now there is no session mechanism\n                if (binary) {\n                    const buffer = messageProxy.getBuffer(\"u8\");\n                    messageProxy.destroy();\n                    const payload = new Uint8ClampedArray(buffer.data.buffer, buffer.data.byteOffset, buffer.data.byteLength);\n                    ctx.postMessage({\n                        type: \"websocket:message\",\n                        data: {\n                            payload: new Uint8Array(payload),\n                        },\n                    });\n                }\n                else {\n                    ctx.postMessage({\n                        type: \"websocket:message\",\n                        data: {\n                            payload: messageProxy,\n                        },\n                    });\n                }\n            });\n            break;\n        }\n        case \"websocket:send\": {\n            console.debug(\"websocket:send\", data.data);\n            const { payload } = data.data;\n            httpServer.receive_websocket_from_js(payload);\n            break;\n        }\n        case \"http:request\": {\n            console.debug(\"http:request\", data.data);\n            const { request, httpCommId } = data.data;\n            const onResponse = (statusCode, _headers, _body) => {\n                const headers = _headers.toJs();\n                const body = _body.toJs();\n                console.debug({ httpCommId, statusCode, headers, body });\n                ctx.postMessage({\n                    type: \"http:response\",\n                    data: {\n                        httpCommId,\n                        response: {\n                            statusCode,\n                            headers,\n                            body,\n                        },\n                    },\n                });\n            };\n            httpServer.receive_http_from_js(request.method, request.path, request.headers, request.body, onResponse);\n            break;\n        }\n        case \"mainscript:set\": {\n            const { mainScriptData } = data.data;\n            pyodide.FS.writeFile(_mainScriptPath, mainScriptData, {\n                encoding: \"utf8\",\n            });\n            break;\n        }\n        case \"install\": {\n            const messagePort = event.ports[0];\n            const { requirements } = data.data;\n            const micropip = pyodide.pyimport(\"micropip\");\n            console.debug(\"Install the requirements:\", requirements);\n            micropip.install\n                .callKwargs(requirements, { keep_going: true })\n                .then(() => {\n                console.debug(\"Successfully installed\");\n                messagePort.postMessage({\n                    type: \"reply\",\n                });\n            })\n                .catch((error) => {\n                console.error(\"Failed to install\", error);\n                messagePort.postMessage({\n                    type: \"reply\",\n                    error,\n                });\n            });\n        }\n    }\n});\nctx.postMessage({\n    type: \"event:start\",\n});\n//# sourceMappingURL=worker.js.map"],"sourceRoot":""}