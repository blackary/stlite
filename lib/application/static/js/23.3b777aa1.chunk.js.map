{"version":3,"sources":["../../../streamlit/frontend/src/components/shared/ProgressBar/ProgressBar.tsx","../../../streamlit/frontend/src/components/widgets/FileUploader/UploadFileInfo.ts","../../../streamlit/frontend/src/lib/FileHelper.ts","../../../streamlit/frontend/src/components/widgets/FileUploader/styled-components.ts","../../../streamlit/frontend/src/components/widgets/FileUploader/FileDropzoneInstructions.tsx","../../../streamlit/frontend/src/components/widgets/FileUploader/FileDropzone.tsx","../../../streamlit/frontend/src/hocs/withPagination/styled-components.ts","../../../streamlit/frontend/src/hocs/withPagination/Pagination.tsx","../../../streamlit/frontend/src/hocs/withPagination/withPagination.tsx","../../../streamlit/frontend/src/components/widgets/FileUploader/UploadedFile.tsx","../../../streamlit/frontend/src/components/widgets/FileUploader/UploadedFiles.tsx","../../../streamlit/frontend/src/components/widgets/FileUploader/FileUploader.tsx"],"names":["Size","ProgressBar","value","width","size","MEDIUM","overrides","theme","useTheme","heightMap","xs","spacing","twoXS","sm","fontSizes","md","lg","xl","twoXL","defaultOverrides","BarContainer","style","marginTop","none","marginBottom","marginRight","marginLeft","Bar","$theme","height","backgroundColor","colors","progressbarTrackFill","BarProgress","blue","mergeOverrides","UploadFileInfo","name","id","status","this","FileSize","BYTE_CONVERSION_SIZE","isFromWindows","sizeUnitSequence","Gigabyte","Megabyte","Kilobyte","Byte","getSizeDisplay","unit","rounding","Error","sizeIndex","indexOf","nextUnitSize","toFixed","toUpperCase","StyledFileDropzoneSection","isDisabled","display","alignItems","padding","secondaryBg","borderRadius","radii","outline","boxShadow","primary","color","gray","bodyText","StyledFileDropzoneInstructions","StyledFileDropzoneInstructionsFileUploaderIcon","darkenedBgMix100","StyledFileDropzoneInstructionsStyledSpan","StyledFileDropzoneInstructionsColumn","StyledUploadedFiles","left","right","lineHeight","lineHeights","tight","paddingTop","paddingLeft","paddingRight","StyledUploadedFilesList","listStyleType","StyledUploadedFilesListItem","margin","StyledUploadedFileData","flex","overflow","StyledUploadedFileName","textOverflow","whiteSpace","StyledUploadedFile","StyledErrorMessage","StyledFileIcon","StyledFileError","danger","fontSize","StyledFileErrorIcon","compactFileUploader","flexDirection","maxWidth","sizes","full","StyledFileUploader","inSidebar","breakpoints","FileDropzoneInstructions","multiple","acceptedExtensions","maxSizeBytes","Icon","content","CloudUpload","length","join","replace","FileDropzone","onDrop","disabled","accept","undefined","maxSize","getRootProps","getInputProps","data-testid","Button","kind","Kind","PRIMARY","SMALL","StyledPagination","justifyContent","paddingBottom","StyledPaginators","fadedText40","Pagination","className","currentPage","totalPages","onNext","onPrevious","onClick","MINIMAL","ChevronLeft","ChevronRight","calculateNumPages","items","pageSize","Math","ceil","withPagination","WrappedComponent","hoistNonReactStatics","resetOnAdd","props","useState","updateCurrentPage","updateTotalPages","prevItems","usePrevious","useEffect","paginatedItems","slice","min","max","UploadedFileStatus","fileInfo","type","progress","errorMessage","UploadedFile","onDelete","InsertDriveFile","title","Clear","PaginatedFiles","map","file","UploadedFiles","FileUploader","formClearHelper","FormClearHelper","localFileIdCounter","componentDidUpdate","prevProps","element","widgetMgr","reset","setFileUploaderStateValue","FileUploaderStateProto","fromUi","newWidgetValue","createWidgetValue","prevWidgetValue","getFileUploaderStateValue","_","isEqual","setState","files","dropHandler","acceptedFiles","rejectedFiles","multipleFiles","firstFileIndex","findIndex","errors","code","push","splice","state","removeFile","forEach","uploadFile","rejectedInfos","rejected","nextLocalFileId","getErrorMessage","addFiles","cancelToken","axios","CancelToken","source","uploadingFileInfo","addFile","uploadClient","e","onUploadProgress","token","then","newFileId","onUploadComplete","catch","err","isCancel","updateFile","setStatus","toString","localFileId","serverFileId","newestServerFileId","curFile","getFile","errorCode","maxUploadSizeInBytes","deleteFile","fileId","cancel","idToRemove","filter","find","curFileId","newFile","curState","event","newProgress","round","loaded","total","onFormCleared","initialValue","emptyState","widgetValue","maxFileId","uploadedFileInfo","f","Number","disconnect","inputUnit","outputUnit","inputLevel","outputLevel","levelsBetween","abs","byteDifference","sizeConverter","maxUploadSizeMb","some","UploadedFileInfoProto","manageFormClearListener","formId","newestToOldestFiles","reverse","label","help","TooltipIcon","placement","Placement","TOP_RIGHT","React","PureComponent"],"mappings":"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","file":"static/js/23.3b777aa1.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { Theme } from \"src/theme\"\nimport {\n  ProgressBar as UIProgressBar,\n  ProgressBarOverrides,\n} from \"baseui/progress-bar\"\nimport { mergeOverrides } from \"baseui\"\nimport { Overrides } from \"baseui/overrides\"\n\nexport enum Size {\n  EXTRASMALL = \"xs\",\n  SMALL = \"sm\",\n  MEDIUM = \"md\",\n  LARGE = \"lg\",\n  EXTRALARGE = \"xl\",\n}\n\nexport interface ProgressBarProps {\n  width?: number\n  value: number\n  overrides?: Overrides<any>\n  size?: Size\n}\n\nfunction ProgressBar({\n  value,\n  width,\n  size = Size.MEDIUM,\n  overrides,\n}: ProgressBarProps): ReactElement {\n  const theme: Theme = useTheme()\n  const heightMap = {\n    xs: theme.spacing.twoXS,\n    sm: theme.fontSizes.sm,\n    md: theme.spacing.lg,\n    lg: theme.spacing.xl,\n    xl: theme.spacing.twoXL,\n  }\n  const defaultOverrides: Overrides<ProgressBarOverrides> = {\n    BarContainer: {\n      style: {\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n      },\n    },\n    Bar: {\n      style: ({ $theme }: { $theme: any }) => ({\n        width,\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n        height: heightMap[size],\n        backgroundColor: $theme.colors.progressbarTrackFill,\n      }),\n    },\n    BarProgress: {\n      style: {\n        backgroundColor: theme.colors.blue,\n      },\n    },\n  }\n\n  return (\n    <UIProgressBar\n      value={value}\n      overrides={mergeOverrides(defaultOverrides, overrides)}\n    />\n  )\n}\n\nexport default ProgressBar\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CancelTokenSource } from \"axios\"\n\nexport interface UploadingStatus {\n  type: \"uploading\"\n  cancelToken: CancelTokenSource\n  progress: number\n}\n\nexport interface UploadedStatus {\n  type: \"uploaded\"\n\n  /** ID generated by the server. */\n  serverFileId: number\n}\n\nexport interface ErrorStatus {\n  type: \"error\"\n  errorMessage: string\n}\n\n/** The various statuses that an UploadedFileInfo can have. */\nexport type FileStatus = UploadingStatus | UploadedStatus | ErrorStatus\n\n/**\n * Wraps a File object with additional data used by FileUploader.\n * This class is immutable because it's used in within FileUploader.state.\n */\nexport class UploadFileInfo {\n  public readonly name: string\n\n  public readonly size: number\n\n  public readonly status: FileStatus\n\n  /**\n   * ID used to refer to the file locally, for update operations.\n   * If the file is uploaded, it will also have a serverID, which is\n   * used to refer to the file on the server.\n   */\n  public readonly id: number\n\n  /**\n   * Create a clone of this UploadFileInfo with the given status.\n   */\n  public setStatus(status: FileStatus): UploadFileInfo {\n    return new UploadFileInfo(this.name, this.size, this.id, status)\n  }\n\n  public constructor(\n    name: string,\n    size: number,\n    id: number,\n    status: FileStatus\n  ) {\n    this.name = name\n    this.size = size\n    this.id = id\n    this.status = status\n  }\n}\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isFromWindows } from \"src/lib/utils\"\n\nexport enum FileSize {\n  Gigabyte = \"gb\",\n  Megabyte = \"mb\",\n  Kilobyte = \"kb\",\n  Byte = \"b\",\n}\n\n// There is a shift towards displaying storage in base 10 vs base 2\n// but Windows is still displaying things in base 2. This does not handle\n// all cases but for simplicity general rule is to use base 2 for Windows.\nexport const BYTE_CONVERSION_SIZE = isFromWindows() ? 1024 : 1000\nconst sizeUnitSequence = [\n  FileSize.Gigabyte,\n  FileSize.Megabyte,\n  FileSize.Kilobyte,\n  FileSize.Byte,\n]\n\nexport const getSizeDisplay = (\n  size: number,\n  unit: FileSize,\n  rounding = 1\n): string => {\n  if (!unit) {\n    unit = FileSize.Byte\n  }\n\n  if (rounding < 0) {\n    rounding = 0\n  }\n\n  if (size < 0) {\n    throw new Error(\"Size must be greater than or equal to 0\")\n  }\n\n  const sizeIndex = sizeUnitSequence.indexOf(unit)\n  const nextUnitSize = size / BYTE_CONVERSION_SIZE\n  if (sizeIndex && size > BYTE_CONVERSION_SIZE / 2) {\n    return getSizeDisplay(\n      nextUnitSize,\n      sizeUnitSequence[sizeIndex - 1],\n      rounding\n    )\n  }\n  return `${size.toFixed(rounding)}${unit.toUpperCase()}`\n}\n\nexport const sizeConverter = (\n  size: number,\n  inputUnit: FileSize,\n  outputUnit: FileSize\n): number => {\n  if (size < 0) {\n    throw Error(\"Size must be 0 or greater\")\n  }\n\n  const inputLevel = sizeUnitSequence.findIndex(unit => unit === inputUnit)\n  const outputLevel = sizeUnitSequence.findIndex(unit => unit === outputUnit)\n\n  if (inputLevel === -1 || outputLevel === -1) {\n    // Should not ever occur\n    throw Error(\"Unexpected byte unit provided\")\n  }\n\n  if (inputLevel === outputLevel) {\n    return size\n  }\n\n  const levelsBetween = Math.abs(inputLevel - outputLevel)\n  const byteDifference = BYTE_CONVERSION_SIZE ** levelsBetween\n\n  if (inputLevel > outputLevel) {\n    // Going from smaller to bigger\n    return size / byteDifference\n  }\n  // Going from bigger to smaller\n  return size * byteDifference\n}\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { CSSObject } from \"@emotion/styled\"\nimport { Theme } from \"src/theme\"\n\nexport interface StyledFileDropzone {\n  isDisabled: boolean\n}\n\nexport const StyledFileDropzoneSection = styled.section<StyledFileDropzone>(\n  ({ isDisabled, theme }) => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing.lg,\n    backgroundColor: theme.colors.secondaryBg,\n    borderRadius: theme.radii.md,\n    \":focus\": {\n      outline: \"none\",\n      boxShadow: `0 0 0 1px ${theme.colors.primary}`,\n    },\n    color: isDisabled ? theme.colors.gray : theme.colors.bodyText,\n  })\n)\n\nexport const StyledFileDropzoneInstructions = styled.div(({ theme }) => ({\n  marginRight: \"auto\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledFileDropzoneInstructionsFileUploaderIcon = styled.span(\n  ({ theme }) => ({\n    color: theme.colors.darkenedBgMix100,\n    marginRight: theme.spacing.lg,\n  })\n)\n\nexport const StyledFileDropzoneInstructionsStyledSpan = styled.span(\n  ({ theme }) => ({\n    marginBottom: theme.spacing.twoXS,\n  })\n)\n\nexport const StyledFileDropzoneInstructionsColumn = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n})\n\nexport const StyledUploadedFiles = styled.div(({ theme }) => ({\n  left: 0,\n  right: 0,\n  lineHeight: theme.lineHeights.tight,\n  paddingTop: theme.spacing.md,\n  paddingLeft: theme.spacing.lg,\n  paddingRight: theme.spacing.lg,\n}))\n\nexport const StyledUploadedFilesList = styled.ul(({ theme }) => ({\n  listStyleType: \"none\",\n  marginBottom: 0,\n}))\n\nexport const StyledUploadedFilesListItem = styled.li(({ theme }) => ({\n  margin: theme.spacing.none,\n  padding: theme.spacing.none,\n}))\n\nexport const StyledUploadedFileData = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"baseline\",\n  flex: 1,\n  paddingLeft: theme.spacing.lg,\n  overflow: \"hidden\",\n}))\n\nexport const StyledUploadedFileName = styled.div(({ theme }) => ({\n  marginRight: theme.spacing.sm,\n  marginBottom: theme.spacing.twoXS,\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\",\n}))\n\nexport const StyledUploadedFile = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  marginBottom: theme.spacing.twoXS,\n}))\n\nexport const StyledErrorMessage = styled.span(({ theme }) => ({\n  marginRight: theme.spacing.twoXS,\n}))\n\nexport const StyledFileIcon = styled.div(({ theme }) => ({\n  display: \"flex\",\n  padding: theme.spacing.twoXS,\n  color: theme.colors.darkenedBgMix100,\n}))\n\nexport const StyledFileError = styled.small(({ theme }) => ({\n  color: theme.colors.danger,\n  fontSize: theme.fontSizes.sm,\n  height: theme.fontSizes.sm,\n  lineHeight: theme.fontSizes.sm,\n  display: \"flex\",\n  alignItems: \"center\",\n  whiteSpace: \"nowrap\",\n}))\n\nexport const StyledFileErrorIcon = styled.span({})\n\nconst compactFileUploader = (theme: Theme): CSSObject => ({\n  [StyledFileDropzoneSection as any]: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n  },\n  [StyledFileDropzoneInstructions as any]: {\n    marginBottom: theme.spacing.lg,\n  },\n  [StyledFileDropzoneInstructionsFileUploaderIcon as any]: {\n    display: \"none\",\n  },\n  [StyledUploadedFiles as any]: {\n    paddingRight: theme.spacing.lg,\n  },\n  [StyledUploadedFile as any]: {\n    maxWidth: \"inherit\",\n    flex: 1,\n    alignItems: \"flex-start\",\n    marginBottom: theme.spacing.sm,\n  },\n  [StyledUploadedFileName as any]: {\n    width: theme.sizes.full,\n  },\n  [StyledUploadedFileData as any]: {\n    flexDirection: \"column\",\n  },\n  [StyledFileError as any]: {\n    height: \"auto\",\n    whiteSpace: \"initial\",\n  },\n  [StyledFileErrorIcon as any]: {\n    display: \"none\",\n  },\n  [StyledUploadedFilesListItem as any]: {\n    margin: theme.spacing.none,\n    padding: theme.spacing.none,\n  },\n})\n\nexport const StyledFileUploader = styled.div(({ theme }) => {\n  if (theme.inSidebar) {\n    return compactFileUploader(theme)\n  }\n\n  return {\n    [`@media (max-width: ${theme.breakpoints.sm})`]: compactFileUploader(\n      theme\n    ),\n  }\n})\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { CloudUpload } from \"@emotion-icons/material-outlined\"\nimport Icon from \"src/components/shared/Icon\"\nimport { FileSize, getSizeDisplay } from \"src/lib/FileHelper\"\nimport { Small } from \"src/components/shared/TextElements\"\n\nimport {\n  StyledFileDropzoneInstructions,\n  StyledFileDropzoneInstructionsFileUploaderIcon,\n  StyledFileDropzoneInstructionsStyledSpan,\n  StyledFileDropzoneInstructionsColumn,\n} from \"./styled-components\"\n\nexport interface Props {\n  multiple: boolean\n  acceptedExtensions: string[]\n  maxSizeBytes: number\n}\n\nconst FileDropzoneInstructions = ({\n  multiple,\n  acceptedExtensions,\n  maxSizeBytes,\n}: Props): React.ReactElement => (\n  <StyledFileDropzoneInstructions>\n    <StyledFileDropzoneInstructionsFileUploaderIcon>\n      <Icon content={CloudUpload} size=\"threeXL\" />\n    </StyledFileDropzoneInstructionsFileUploaderIcon>\n    <StyledFileDropzoneInstructionsColumn>\n      <StyledFileDropzoneInstructionsStyledSpan>\n        Drag and drop file{multiple ? \"s\" : \"\"} here\n      </StyledFileDropzoneInstructionsStyledSpan>\n      <Small>\n        {`Limit ${getSizeDisplay(maxSizeBytes, FileSize.Byte, 0)} per file`}\n        {acceptedExtensions.length\n          ? ` • ${acceptedExtensions\n              .join(\", \")\n              .replace(/\\./g, \"\")\n              .toUpperCase()}`\n          : null}\n      </Small>\n    </StyledFileDropzoneInstructionsColumn>\n  </StyledFileDropzoneInstructions>\n)\n\nexport default FileDropzoneInstructions\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport Dropzone, { FileRejection } from \"react-dropzone\"\nimport Button, { Kind, Size } from \"src/components/shared/Button\"\n\nimport { StyledFileDropzoneSection } from \"./styled-components\"\nimport FileDropzoneInstructions from \"./FileDropzoneInstructions\"\n\nexport interface Props {\n  disabled: boolean\n  onDrop: (acceptedFiles: File[], rejectedFiles: FileRejection[]) => void\n  multiple: boolean\n  acceptedExtensions: string[]\n  maxSizeBytes: number\n}\n\nconst FileDropzone = ({\n  onDrop,\n  multiple,\n  acceptedExtensions,\n  maxSizeBytes,\n  disabled,\n}: Props): React.ReactElement => (\n  <Dropzone\n    onDrop={onDrop}\n    multiple={multiple}\n    accept={acceptedExtensions.length ? acceptedExtensions : undefined}\n    maxSize={maxSizeBytes}\n    disabled={disabled}\n  >\n    {({ getRootProps, getInputProps }) => (\n      <StyledFileDropzoneSection\n        {...getRootProps()}\n        data-testid=\"stFileUploadDropzone\"\n        isDisabled={disabled}\n      >\n        <input {...getInputProps()} />\n        <FileDropzoneInstructions\n          multiple={multiple}\n          acceptedExtensions={acceptedExtensions}\n          maxSizeBytes={maxSizeBytes}\n        />\n        <Button kind={Kind.PRIMARY} disabled={disabled} size={Size.SMALL}>\n          Browse files\n        </Button>\n      </StyledFileDropzoneSection>\n    )}\n  </Dropzone>\n)\n\nexport default FileDropzone\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledPagination = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n  paddingBottom: theme.spacing.twoXS,\n  marginBottom: theme.spacing.twoXS,\n}))\n\nexport const StyledPaginators = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: theme.colors.fadedText40,\n}))\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"@emotion-icons/material-outlined\"\nimport Button, { Kind } from \"src/components/shared/Button\"\nimport Icon from \"src/components/shared/Icon\"\nimport { Small } from \"src/components/shared/TextElements\"\nimport { StyledPagination, StyledPaginators } from \"./styled-components\"\n\nexport interface Props {\n  className: string\n  currentPage: number\n  totalPages: number\n  pageSize: number\n  onNext: (event: React.SyntheticEvent<HTMLElement>) => void\n  onPrevious: (event: React.SyntheticEvent<HTMLElement>) => void\n}\n\nconst Pagination = ({\n  className,\n  currentPage,\n  totalPages,\n  onNext,\n  onPrevious,\n}: Props): React.ReactElement => {\n  return (\n    <StyledPagination className={className}>\n      <Small>{`Showing page ${currentPage} of ${totalPages}`}</Small>\n      <StyledPaginators>\n        <Button onClick={onPrevious} kind={Kind.MINIMAL}>\n          <Icon content={ChevronLeft} size=\"xl\" />\n        </Button>\n        <Button onClick={onNext} kind={Kind.MINIMAL}>\n          <Icon content={ChevronRight} size=\"xl\" />\n        </Button>\n      </StyledPaginators>\n    </StyledPagination>\n  )\n}\n\nexport default Pagination\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement, useEffect, useState } from \"react\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\nimport Pagination from \"src/hocs/withPagination/Pagination\"\nimport { usePrevious } from \"src/lib/Hooks\"\n\nexport interface Props {\n  items: any[]\n  pageSize: number\n  resetOnAdd: boolean\n}\n\nconst calculateNumPages = (items: any[], pageSize: number): number =>\n  Math.ceil(items.length / pageSize)\n\nconst withPagination = (\n  WrappedComponent: ComponentType<any>\n): ComponentType<any> => {\n  const WithPagination = ({\n    pageSize,\n    items,\n    resetOnAdd,\n    ...props\n  }: Props): ReactElement => {\n    const [currentPage, updateCurrentPage] = useState<number>(0)\n    const [totalPages, updateTotalPages] = useState<number>(\n      calculateNumPages(items, pageSize)\n    )\n\n    const prevItems: any[] = usePrevious(items)\n\n    useEffect(() => {\n      if (prevItems && prevItems.length !== items.length) {\n        updateTotalPages(calculateNumPages(items, pageSize))\n      }\n      if (prevItems && prevItems.length < items.length) {\n        if (resetOnAdd) {\n          updateCurrentPage(0)\n        }\n      } else if (currentPage + 1 >= totalPages) {\n        updateCurrentPage(totalPages - 1)\n      }\n    }, [items, currentPage, pageSize, prevItems, resetOnAdd, totalPages])\n\n    const onNext = (): void => {\n      updateCurrentPage(Math.min(currentPage + 1, totalPages - 1))\n    }\n\n    const onPrevious = (): void => {\n      updateCurrentPage(Math.max(0, currentPage - 1))\n    }\n\n    const paginatedItems = items.slice(\n      currentPage * pageSize,\n      currentPage * pageSize + pageSize\n    )\n    return (\n      <>\n        <WrappedComponent items={paginatedItems} {...props} />\n        {items.length > pageSize ? (\n          <Pagination\n            className=\"streamlit-paginator\"\n            pageSize={pageSize}\n            totalPages={totalPages}\n            currentPage={currentPage + 1}\n            onNext={onNext}\n            onPrevious={onPrevious}\n          />\n        ) : null}\n      </>\n    )\n  }\n  return hoistNonReactStatics(WithPagination, WrappedComponent)\n}\n\nexport default withPagination\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  Clear,\n  Error,\n  InsertDriveFile,\n} from \"@emotion-icons/material-outlined\"\nimport Button, { Kind } from \"src/components/shared/Button\"\nimport Icon from \"src/components/shared/Icon\"\nimport ProgressBar, { Size } from \"src/components/shared/ProgressBar\"\nimport { Small } from \"src/components/shared/TextElements\"\nimport { FileSize, getSizeDisplay } from \"src/lib/FileHelper\"\nimport {\n  StyledUploadedFile,\n  StyledFileErrorIcon,\n  StyledErrorMessage,\n  StyledFileError,\n  StyledFileIcon,\n  StyledUploadedFileData,\n  StyledUploadedFileName,\n} from \"./styled-components\"\nimport { UploadFileInfo } from \"./UploadFileInfo\"\n\nexport interface Props {\n  fileInfo: UploadFileInfo\n  onDelete: (id: number) => void\n}\n\nexport interface UploadedFileStatusProps {\n  fileInfo: UploadFileInfo\n}\n\nexport const UploadedFileStatus = ({\n  fileInfo,\n}: UploadedFileStatusProps): React.ReactElement | null => {\n  if (fileInfo.status.type === \"uploading\") {\n    return (\n      <ProgressBar\n        value={fileInfo.status.progress}\n        size={Size.SMALL}\n        overrides={{\n          Bar: {\n            style: {\n              marginLeft: 0,\n              marginTop: \"4px\",\n            },\n          },\n        }}\n      />\n    )\n  }\n\n  if (fileInfo.status.type === \"error\") {\n    return (\n      <StyledFileError>\n        <StyledErrorMessage data-testid=\"stUploadedFileErrorMessage\">\n          {fileInfo.status.errorMessage}\n        </StyledErrorMessage>\n        <StyledFileErrorIcon>\n          <Icon content={Error} size=\"lg\" />\n        </StyledFileErrorIcon>\n      </StyledFileError>\n    )\n  }\n\n  if (fileInfo.status.type === \"uploaded\") {\n    return <Small>{getSizeDisplay(fileInfo.size, FileSize.Byte)}</Small>\n  }\n\n  return null\n}\n\nconst UploadedFile = ({ fileInfo, onDelete }: Props): React.ReactElement => {\n  return (\n    <StyledUploadedFile className=\"uploadedFile\">\n      <StyledFileIcon>\n        <Icon content={InsertDriveFile} size=\"twoXL\" />\n      </StyledFileIcon>\n      <StyledUploadedFileData className=\"uploadedFileData\">\n        <StyledUploadedFileName\n          className=\"uploadedFileName\"\n          title={fileInfo.name}\n        >\n          {fileInfo.name}\n        </StyledUploadedFileName>\n        <UploadedFileStatus fileInfo={fileInfo} />\n      </StyledUploadedFileData>\n      <div data-testid=\"fileDeleteBtn\">\n        <Button onClick={() => onDelete(fileInfo.id)} kind={Kind.MINIMAL}>\n          <Icon content={Clear} size=\"lg\" />\n        </Button>\n      </div>\n    </StyledUploadedFile>\n  )\n}\n\nexport default UploadedFile\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport withPagination, { PaginationProps } from \"src/hocs/withPagination\"\nimport UploadedFile from \"./UploadedFile\"\nimport {\n  StyledUploadedFiles,\n  StyledUploadedFilesList,\n  StyledUploadedFilesListItem,\n} from \"./styled-components\"\nimport { UploadFileInfo } from \"./UploadFileInfo\"\n\nexport interface Props {\n  items: UploadFileInfo[]\n  onDelete: (id: number) => void\n}\n\nconst UploadedFileList = ({ items, onDelete }: Props): ReactElement => {\n  return (\n    <StyledUploadedFilesList>\n      {items.map(file => (\n        <StyledUploadedFilesListItem key={file.id}>\n          <UploadedFile fileInfo={file} onDelete={onDelete} />\n        </StyledUploadedFilesListItem>\n      ))}\n    </StyledUploadedFilesList>\n  )\n}\n\nexport const PaginatedFiles = withPagination(UploadedFileList)\n\nconst UploadedFiles = (props: Props & PaginationProps): ReactElement => (\n  <StyledUploadedFiles>\n    <PaginatedFiles {...props} />\n  </StyledUploadedFiles>\n)\nexport default UploadedFiles\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport axios from \"axios\"\nimport _ from \"lodash\"\nimport React from \"react\"\nimport { FileRejection } from \"react-dropzone\"\n\nimport {\n  FileUploader as FileUploaderProto,\n  FileUploaderState as FileUploaderStateProto,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\n\nimport { FileSize, getSizeDisplay, sizeConverter } from \"src/lib/FileHelper\"\nimport { FileUploadClient } from \"src/lib/FileUploadClient\"\nimport { WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport FileDropzone from \"./FileDropzone\"\nimport { StyledFileUploader } from \"./styled-components\"\nimport UploadedFiles from \"./UploadedFiles\"\nimport { UploadFileInfo, UploadedStatus } from \"./UploadFileInfo\"\n\nexport interface Props {\n  disabled: boolean\n  element: FileUploaderProto\n  widgetMgr: WidgetStateManager\n  uploadClient: FileUploadClient\n  width: number\n}\n\ntype FileUploaderStatus =\n  | \"ready\" // FileUploader can upload or delete files\n  | \"updating\" // at least one file is being uploaded or deleted\n\nexport interface State {\n  /**\n   * List of files dropped on the FileUploader by the user. This list includes\n   * rejected files that will not be updated.\n   */\n  files: UploadFileInfo[]\n\n  /**\n   * The most recent file ID we've received from the server. This gets sent\n   * back to the server during widget update so that it clean up\n   * orphaned files. File IDs start at 1 and only ever increase, so a\n   * file with a higher ID is guaranteed to be newer than one with a lower ID.\n   */\n  newestServerFileId: number\n}\n\nclass FileUploader extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  /**\n   * A counter for assigning unique internal IDs to each file tracked\n   * by the uploader. These IDs are used to update file state internally,\n   * and are separate from the serverFileIds that are returned by the server.\n   */\n  private localFileIdCounter = 1\n\n  public constructor(props: Props) {\n    super(props)\n    this.state = this.initialValue\n  }\n\n  get initialValue(): State {\n    const emptyState = { files: [], newestServerFileId: 0 }\n    const { widgetMgr, element } = this.props\n\n    const widgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (widgetValue == null) {\n      return emptyState\n    }\n\n    const { maxFileId, uploadedFileInfo } = widgetValue\n    if (maxFileId == null || maxFileId === 0 || uploadedFileInfo == null) {\n      return emptyState\n    }\n\n    return {\n      files: uploadedFileInfo.map(f => {\n        const name = f.name as string\n        const size = f.size as number\n        const serverFileId = f.id as number\n\n        return new UploadFileInfo(name, size, this.nextLocalFileId(), {\n          type: \"uploaded\",\n          serverFileId,\n        })\n      }),\n      newestServerFileId: Number(maxFileId),\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  /**\n   * Return this.props.element.maxUploadSizeMb, converted to bytes.\n   */\n  private get maxUploadSizeInBytes(): number {\n    const maxMbs = this.props.element.maxUploadSizeMb\n    return sizeConverter(maxMbs, FileSize.Megabyte, FileSize.Byte)\n  }\n\n  /**\n   * Return the FileUploader's current status, which is derived from\n   * its state.\n   */\n  public get status(): FileUploaderStatus {\n    const isFileUpdating = (file: UploadFileInfo): boolean =>\n      file.status.type === \"uploading\"\n\n    // If any of our files is Uploading or Deleting, then we're currently\n    // updating.\n    if (this.state.files.some(isFileUpdating)) {\n      return \"updating\"\n    }\n\n    return \"ready\"\n  }\n\n  public componentDidUpdate = (prevProps: Props): void => {\n    const { element, widgetMgr } = this.props\n\n    // Widgets are disabled if the app is not connected anymore.\n    // If the app disconnects from the server, a new session is created and users\n    // will lose access to the files they uploaded in their previous session.\n    // If we are reconnecting, reset the file uploader so that the widget is\n    // in sync with the new session.\n    if (prevProps.disabled !== this.props.disabled && this.props.disabled) {\n      this.reset()\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        new FileUploaderStateProto(),\n        { fromUi: false }\n      )\n      return\n    }\n\n    // Maybe send a widgetValue update to the widgetStateManager.\n\n    // If our status is not \"ready\", then we have uploads in progress.\n    // We won't submit a new widgetValue until all uploads have resolved.\n    if (this.status !== \"ready\") {\n      return\n    }\n\n    // If we have had no completed uploads, our widgetValue will be\n    // undefined, and we can early-out of the state update.\n    const newWidgetValue = this.createWidgetValue()\n    if (newWidgetValue === undefined) {\n      return\n    }\n\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (!_.isEqual(newWidgetValue, prevWidgetValue)) {\n      widgetMgr.setFileUploaderStateValue(element, newWidgetValue, {\n        fromUi: true,\n      })\n    }\n  }\n\n  /**\n   * When the server receives the widget value, it deletes \"orphaned\" uploaded\n   * files. An orphaned file is any file, associated with this uploader,\n   * whose file ID is not in the file ID list, and whose\n   * ID is <= `newestServerFileId`. This logic ensures that a FileUploader\n   * within a form doesn't have any of its \"unsubmitted\" uploads prematurely\n   * deleted when the script is re-run.\n   */\n  private createWidgetValue(): FileUploaderStateProto | undefined {\n    if (this.state.newestServerFileId === 0) {\n      // If newestServerFileId is 0, we've had no transaction with the server,\n      // and therefore no widget value.\n      return undefined\n    }\n\n    const uploadedFileInfo: UploadedFileInfoProto[] = this.state.files\n      .filter(f => f.status.type === \"uploaded\")\n      .map(f => {\n        const { name, size, status } = f\n        return new UploadedFileInfoProto({\n          id: (status as UploadedStatus).serverFileId,\n          name,\n          size,\n        })\n      })\n\n    return new FileUploaderStateProto({\n      maxFileId: this.state.newestServerFileId,\n      uploadedFileInfo,\n    })\n  }\n\n  /**\n   * Clear files and errors, and reset the widget to its READY state.\n   */\n  private reset = (): void => {\n    this.setState({ files: [] })\n  }\n\n  /**\n   * Called by react-dropzone when files and drag-and-dropped onto the widget.\n   *\n   * @param acceptedFiles an array of files.\n   * @param rejectedFiles an array of FileRejections. A FileRejection\n   * encapsulates a File and an error indicating why it was rejected by\n   * the dropzone widget.\n   */\n  private dropHandler = (\n    acceptedFiles: File[],\n    rejectedFiles: FileRejection[]\n  ): void => {\n    const { element } = this.props\n    const { multipleFiles } = element\n\n    // If this is a single-file uploader and multiple files were dropped,\n    // all the files will be rejected. In this case, we pull out the first\n    // valid file into acceptedFiles, and reject the rest.\n    if (\n      !multipleFiles &&\n      acceptedFiles.length === 0 &&\n      rejectedFiles.length > 1\n    ) {\n      const firstFileIndex = rejectedFiles.findIndex(\n        file =>\n          file.errors.length === 1 && file.errors[0].code === \"too-many-files\"\n      )\n\n      if (firstFileIndex >= 0) {\n        acceptedFiles.push(rejectedFiles[firstFileIndex].file)\n        rejectedFiles.splice(firstFileIndex, 1)\n      }\n    }\n\n    // If this is a single-file uploader that already has a file,\n    // remove that file so that it can be replaced with our new one.\n    if (\n      !multipleFiles &&\n      acceptedFiles.length > 0 &&\n      this.state.files.length > 0\n    ) {\n      this.removeFile(this.state.files[0].id)\n    }\n\n    // Upload each accepted file.\n    acceptedFiles.forEach(this.uploadFile)\n\n    // Create an UploadFileInfo for each of our rejected files, and add them to\n    // our state.\n    if (rejectedFiles.length > 0) {\n      const rejectedInfos = rejectedFiles.map(rejected => {\n        const { file } = rejected\n        return new UploadFileInfo(\n          file.name,\n          file.size,\n          this.nextLocalFileId(),\n          {\n            type: \"error\",\n            errorMessage: this.getErrorMessage(\n              rejected.errors[0].code,\n              rejected.file\n            ),\n          }\n        )\n      })\n      this.addFiles(rejectedInfos)\n    }\n  }\n\n  public uploadFile = (file: File): void => {\n    // Create an UploadFileInfo for this file and add it to our state.\n    const cancelToken = axios.CancelToken.source()\n    const uploadingFileInfo = new UploadFileInfo(\n      file.name,\n      file.size,\n      this.nextLocalFileId(),\n      {\n        type: \"uploading\",\n        cancelToken,\n        progress: 1,\n      }\n    )\n    this.addFile(uploadingFileInfo)\n\n    this.props.uploadClient\n      .uploadFile(\n        this.props.element,\n        file,\n        e => this.onUploadProgress(e, uploadingFileInfo.id),\n        cancelToken.token\n      )\n      .then(newFileId =>\n        this.onUploadComplete(uploadingFileInfo.id, newFileId)\n      )\n      .catch(err => {\n        // If this was a cancel error, we don't show the user an error -\n        // the cancellation was in response to an action they took.\n        if (!axios.isCancel(err)) {\n          this.updateFile(\n            uploadingFileInfo.id,\n            uploadingFileInfo.setStatus({\n              type: \"error\",\n              errorMessage: err ? err.toString() : \"Unknown error\",\n            })\n          )\n        }\n      })\n  }\n\n  /**\n   * Called when an upload has completed. Updates the file's status, and\n   * assigns it the new file ID returned from the server.\n   */\n  private onUploadComplete = (\n    localFileId: number,\n    serverFileId: number\n  ): void => {\n    // \"state.newestServerFileId\" must always hold the max fileID\n    // returned from the server.\n    this.setState(state => ({\n      newestServerFileId: Math.max(state.newestServerFileId, serverFileId),\n    }))\n\n    const curFile = this.getFile(localFileId)\n    if (curFile == null || curFile.status.type !== \"uploading\") {\n      // The file may have been canceled right before the upload\n      // completed. In this case, we just bail.\n      return\n    }\n\n    this.updateFile(\n      curFile.id,\n      curFile.setStatus({ type: \"uploaded\", serverFileId })\n    )\n  }\n\n  /**\n   * Return a human-readable message for the given error.\n   */\n  private getErrorMessage = (errorCode: string, file: File): string => {\n    switch (errorCode) {\n      case \"file-too-large\":\n        return `File must be ${getSizeDisplay(\n          this.maxUploadSizeInBytes,\n          FileSize.Byte\n        )} or smaller.`\n      case \"file-invalid-type\":\n        return `${file.type} files are not allowed.`\n      case \"file-too-small\":\n        // This should not fire.\n        return `File size is too small.`\n      case \"too-many-files\":\n        return \"Only one file is allowed.\"\n      default:\n        return \"Unexpected error. Please try again.\"\n    }\n  }\n\n  /**\n   * Delete the file with the given ID:\n   * - Cancel the file upload if it's in progress\n   * - Remove the fileID from our local state\n   * We don't actually tell the server to delete the file. It will garbage\n   * collect it.\n   */\n  public deleteFile = (fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null) {\n      return\n    }\n\n    if (file.status.type === \"uploading\") {\n      // The file hasn't been uploaded. Let's cancel the request.\n      // However, it may have been received by the server so we'll still\n      // send out a request to delete.\n      file.status.cancelToken.cancel()\n    }\n\n    this.removeFile(fileId)\n  }\n\n  /** Append the given file to `state.files`. */\n  private addFile = (file: UploadFileInfo): void => {\n    this.setState(state => ({ files: [...state.files, file] }))\n  }\n\n  /** Append the given files to `state.files`. */\n  private addFiles = (files: UploadFileInfo[]): void => {\n    this.setState(state => ({ files: [...state.files, ...files] }))\n  }\n\n  /** Remove the file with the given ID from `state.files`. */\n  private removeFile = (idToRemove: number): void => {\n    this.setState(state => ({\n      files: state.files.filter(file => file.id !== idToRemove),\n    }))\n  }\n\n  /**\n   * Return the file with the given ID, if one exists.\n   */\n  private getFile = (fileId: number): UploadFileInfo | undefined => {\n    return this.state.files.find(file => file.id === fileId)\n  }\n\n  /** Replace the file with the given id in `state.files`. */\n  private updateFile = (curFileId: number, newFile: UploadFileInfo): void => {\n    this.setState(curState => {\n      return {\n        files: curState.files.map(file =>\n          file.id === curFileId ? newFile : file\n        ),\n      }\n    })\n  }\n\n  /**\n   * Callback for file upload progress. Updates a single file's local `progress`\n   * state.\n   */\n  private onUploadProgress = (event: ProgressEvent, fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null || file.status.type !== \"uploading\") {\n      return\n    }\n\n    const newProgress = Math.round((event.loaded * 100) / event.total)\n    if (file.status.progress === newProgress) {\n      return\n    }\n\n    // Update file.progress\n    this.updateFile(\n      fileId,\n      file.setStatus({\n        type: \"uploading\",\n        cancelToken: file.status.cancelToken,\n        progress: newProgress,\n      })\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ files: [] }, () => {\n      const newWidgetValue = this.createWidgetValue()\n      if (newWidgetValue == null) {\n        return\n      }\n\n      this.props.widgetMgr.setFileUploaderStateValue(\n        this.props.element,\n        newWidgetValue,\n        { fromUi: true }\n      )\n    })\n  }\n\n  public render(): React.ReactNode {\n    const { files } = this.state\n    const { element, disabled, widgetMgr } = this.props\n    const acceptedExtensions = element.type\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // We display files in the reverse order they were added.\n    // This way, if you have multiple pages of uploaded files and then drop\n    // another one, you'll see that newest file at the top of the first page.\n    const newestToOldestFiles = files.slice().reverse()\n\n    return (\n      <StyledFileUploader data-testid=\"stFileUploader\">\n        <WidgetLabel label={element.label} disabled={disabled}>\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <FileDropzone\n          onDrop={this.dropHandler}\n          multiple={element.multipleFiles}\n          acceptedExtensions={acceptedExtensions}\n          maxSizeBytes={this.maxUploadSizeInBytes}\n          disabled={disabled}\n        />\n        {newestToOldestFiles.length > 0 && (\n          <UploadedFiles\n            items={newestToOldestFiles}\n            pageSize={3}\n            onDelete={this.deleteFile}\n            resetOnAdd\n          />\n        )}\n      </StyledFileUploader>\n    )\n  }\n\n  private nextLocalFileId(): number {\n    return this.localFileIdCounter++\n  }\n}\n\nexport default FileUploader\n"],"sourceRoot":""}