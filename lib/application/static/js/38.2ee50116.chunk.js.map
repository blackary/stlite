{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrameCells.tsx","../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrameContainer.tsx","../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrame.tsx"],"names":["ColumnType","determineColumnType","quiverType","dataTypeName","Quiver","getTypeName","columnType","Text","Boolean","includes","Number","startsWith","List","getDisplayContent","quiverCell","displayContent","format","content","contentType","replace","extractCssProperty","htmlElementId","property","cssStyle","match","RegExp","exec","getCellTemplate","type","readonly","style","kind","GridCellKind","data","displayData","allowOverlay","undefined","contentAlign","Bubble","Error","createDataFrameTheme","theme","accentColor","colors","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","textDark","bodyText","textMedium","textLight","textBubble","bgCell","bgColor","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","ResizableContainer","styled","div","p","minHeight","maxHeight","minWidth","maxWidth","height","ThemedDataFrameContainer","width","children","onBlur","useTheme","className","useDataLoader","element","sort","useState","Map","columnSizes","setColumnSizes","columns","isEmpty","push","id","title","hasMenu","getTemplate","numIndices","types","index","length","numColumns","i","columnTitle","getColumns","map","column","has","get","numRows","dimensions","rows","onColumnResize","React","useCallback","newSize","set","getCellContent","col","row","cellTemplate","cssStyles","cellKind","Custom","cssId","themeOverride","fontColor","backgroundColor","formattedContents","notNullOrUndefined","cellData","Int32Array","JSON","parse","stringify","_key","value","fillCellTemplate","getCell","error","logError","getCellContentSorted","useColumnSort","updatedColumns","direction","updateSortingHeader","withFullScreenWrapper","propHeight","propWidth","setSort","isFocused","setIsFocused","CompactSelection","empty","gridSelection","setGridSelection","dataEditorRef","useRef","onHeaderClick","sortDirection","clickedColumn","mode","Math","max","min","MIN_COLUMN_WIDTH","current","ref","minColumnWidth","maxColumnWidth","rowHeight","headerHeight","onColumnResized","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","args","experimental","scrollbarWidthOverride"],"mappings":"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","file":"static/js/38.2ee50116.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  TextCell,\n  Theme as GlideTheme,\n  BooleanCell,\n  NumberCell,\n  BubbleCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { DataFrameCell, Quiver, Type as QuiverType } from \"src/lib/Quiver\"\nimport { notNullOrUndefined } from \"src/lib/utils\"\n\nexport enum ColumnType {\n  Text = \"text\",\n  Number = \"number\",\n  Boolean = \"boolean\",\n  List = \"list\",\n}\n\n/**\n * Maps the data type from Quiver to a valid column type.\n */\nexport function determineColumnType(quiverType: QuiverType): ColumnType {\n  const dataTypeName = quiverType && Quiver.getTypeName(quiverType)\n\n  let columnType = ColumnType.Text\n\n  if (!dataTypeName) {\n    // Use text column as fallback\n    columnType = ColumnType.Text\n  } else if (dataTypeName === \"bool\") {\n    columnType = ColumnType.Boolean\n  } else if ([\"int64\", \"float64\", \"range\"].includes(dataTypeName)) {\n    // The default index in pandas uses a range type.\n    columnType = ColumnType.Number\n  } else if (dataTypeName.startsWith(\"list\")) {\n    columnType = ColumnType.List\n  }\n\n  return columnType\n}\n\n/**\n * Returns either the formatted content or display value for a Quiver cell.\n */\nexport function getDisplayContent(quiverCell: DataFrameCell): string {\n  const displayContent =\n    quiverCell.displayContent ||\n    Quiver.format(quiverCell.content, quiverCell.contentType)\n\n  // Remove all line breaks\n  return displayContent.replace(/(\\r\\n|\\n|\\r)/gm, \" \")\n}\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId: The ID of the HTML element to extract the property for.\n * @param property: The css property to extract the value for.\n * @param cssStyle: The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[^{]*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;\\\\s]+)[;]?.*}`,\n    \"gm\"\n  )\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1]\n  }\n\n  return undefined\n}\n/**\n * Returns a template object representing an empty cell for a given data type.\n *\n * @param type: The type of the column.\n * @param readonly: If true, returns a read-only version of the cell template.\n * @param style: The style used for the column.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellTemplate(\n  type: ColumnType,\n  readonly: boolean,\n  style: \"normal\" | \"faded\" = \"normal\"\n): GridCell {\n  if (type === ColumnType.Text) {\n    return {\n      kind: GridCellKind.Text,\n      data: \"\",\n      displayData: \"\",\n      allowOverlay: true,\n      readonly,\n      style,\n    } as TextCell\n  }\n\n  if (type === ColumnType.Boolean) {\n    return {\n      kind: GridCellKind.Boolean,\n      data: false,\n      readonly,\n      allowOverlay: false, // no overlay possible\n      style,\n    } as BooleanCell\n  }\n\n  if (type === ColumnType.Number) {\n    return {\n      kind: GridCellKind.Number,\n      data: undefined,\n      displayData: \"\",\n      readonly,\n      allowOverlay: true,\n      contentAlign: \"right\",\n      style,\n    } as NumberCell\n  }\n\n  if (type === ColumnType.List) {\n    return {\n      kind: GridCellKind.Bubble,\n      data: [],\n      allowOverlay: true,\n      style,\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell type: ${type}`)\n}\n\n/**\n * Returns the sort mode based on the given column type.\n */\nexport function getColumnSortMode(columnType: ColumnType): string {\n  if (columnType === ColumnType.Number) {\n    // Smart mode also works correctly for numbers\n    return \"smart\"\n  }\n\n  return \"default\"\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the quiver object. Different types of data will\n * result in different cell types.\n *\n * @param cellTemplate: the empty cell template from the column.\n * @param quiverCell: a dataframe cell object from Quiver.\n * @param cssStyles: optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function fillCellTemplate(\n  cellTemplate: GridCell,\n  quiverCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellKind = cellTemplate.kind\n  if (cellTemplate.kind === GridCellKind.Custom) {\n    cellKind = (cellTemplate.data as any)?.kind\n\n    if (!cellKind) {\n      throw new Error(`Unable to determine cell type for custom cell.`)\n    }\n  }\n\n  if (cssStyles && quiverCell.cssId) {\n    const themeOverride = {} as Partial<GlideTheme>\n\n    // Extract and apply the font color\n    const fontColor = extractCssProperty(quiverCell.cssId, \"color\", cssStyles)\n    if (fontColor) {\n      themeOverride.textDark = fontColor\n    }\n\n    // Extract and apply the background color\n    const backgroundColor = extractCssProperty(\n      quiverCell.cssId,\n      \"background-color\",\n      cssStyles\n    )\n    if (backgroundColor) {\n      themeOverride.bgCell = backgroundColor\n    }\n\n    if (themeOverride) {\n      // Apply the background and font color in the theme override\n      cellTemplate = {\n        ...cellTemplate,\n        themeOverride,\n      }\n    }\n  }\n\n  if (cellKind === GridCellKind.Text) {\n    const formattedContents = getDisplayContent(quiverCell)\n    return {\n      ...cellTemplate,\n      data:\n        typeof quiverCell.content === \"string\" ||\n        !notNullOrUndefined(quiverCell.content) // don't use formattedContents for null/undefined\n          ? quiverCell.content\n          : formattedContents,\n      displayData: formattedContents,\n    } as TextCell\n  }\n\n  if (cellKind === GridCellKind.Number) {\n    const formattedContents = getDisplayContent(quiverCell)\n    let cellData = quiverCell.content\n\n    if (cellData instanceof Int32Array) {\n      // int values need to be extracted this way:\n      // eslint-disable-next-line prefer-destructuring\n      cellData = (cellData as Int32Array)[0]\n    }\n\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(cellData) ? Number(cellData) : undefined,\n      displayData: formattedContents,\n    } as NumberCell\n  }\n\n  if (cellKind === GridCellKind.Boolean) {\n    return {\n      ...cellTemplate,\n      data: quiverCell.content as boolean,\n    } as BooleanCell\n  }\n\n  if (cellKind === GridCellKind.Bubble) {\n    // TODO(lukasmasuch): we use JSON.parse(JSON.stringify) here to handle type conversations to base types.\n    // This could be improved by introducing some custom code for handling type conversations.\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(quiverCell.content)\n        ? JSON.parse(\n            JSON.stringify(quiverCell.content, (_key, value) =>\n              typeof value === \"bigint\" ? Number(value) : value\n            )\n          )\n        : [],\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell kind: ${cellKind}`)\n}\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport styled, { ThemeProvider } from \"styled-components\"\nimport { useTheme } from \"@emotion/react\"\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme } from \"@glideapps/glide-data-grid\"\n\nimport { Theme } from \"src/theme\"\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @param theme: Our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nexport function createDataFrameTheme(theme: Theme): GlideTheme {\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText60,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n  }\n}\n\ninterface ResizableContainerProps {\n  width: number\n  maxWidth: number\n  minWidth: number\n  height: number\n  minHeight: number\n  maxHeight: number\n  theme: Theme\n}\n\n/**\n * A resizable data grid container component.\n *\n * We need to use the styled-components library here instead of emotion.\n * The reason is that glide-data-grid requires a styled-component to pass down the theme.\n */\nexport const ResizableContainer = styled.div<ResizableContainerProps>`\n  overflow: auto;\n  position: relative;\n  resize: both;\n  display: inline-block;\n  min-height: ${p => p.minHeight}px;\n  max-height: ${p => p.maxHeight}px;\n  min-width: ${p => p.minWidth}px;\n  max-width: ${p => p.maxWidth}px;\n  height: ${p => p.height}px;\n  border: 1px solid ${p => p.theme.colors.fadedText05};\n\n  > :first-child {\n    height: 100%;\n    min-width: 100%;\n  }\n\n  & .dvn-scroller {\n    scrollbar-width: thin;\n    overflow-x: overlay;\n    overflow-y: overlay;\n  }\n\n  // Hide the resize handle in the right corner. Resizing is still be possible.\n  &::-webkit-resizer {\n    display: none;\n  }\n`\ninterface DataFrameContainerProps {\n  width: number\n  maxWidth: number\n  minWidth: number\n  height: number\n  minHeight: number\n  maxHeight: number\n  children: ReactElement\n  onBlur?: () => void\n}\n\n/**\n * A themed and resizable container for then interactive data table.\n */\nfunction ThemedDataFrameContainer({\n  width,\n  maxWidth,\n  minWidth,\n  height,\n  minHeight,\n  maxHeight,\n  children,\n  onBlur,\n}: DataFrameContainerProps): ReactElement {\n  const theme: Theme = useTheme()\n\n  return (\n    // This is a styled-components theme provider (not emotion!).\n    // It is required by glide-data-grid to customize the theming.\n    <ThemeProvider theme={createDataFrameTheme(theme)}>\n      <ResizableContainer\n        className=\"stDataFrame\"\n        width={width}\n        maxWidth={maxWidth}\n        minWidth={minWidth}\n        height={height}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        theme={theme}\n        onBlur={onBlur}\n      >\n        {children}\n      </ResizableContainer>\n    </ThemeProvider>\n  )\n}\n\nexport default ThemedDataFrameContainer\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useState } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  GridCell,\n  GridColumn,\n  DataEditorProps,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"src/lib/Quiver\"\nimport { logError } from \"src/lib/log\"\n\nimport {\n  getCellTemplate,\n  fillCellTemplate,\n  getColumnSortMode,\n  determineColumnType,\n  ColumnType,\n} from \"./DataFrameCells\"\nimport ThemedDataFrameContainer from \"./DataFrameContainer\"\n\nconst ROW_HEIGHT = 35\nconst MIN_COLUMN_WIDTH = 35\nconst MAX_COLUMN_WIDTH = 600\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + 3\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\n\n/**\n * The GridColumn type extended with a function to get a template of the given type.\n */\ntype GridColumnWithCellTemplate = GridColumn & {\n  getTemplate(): GridCell\n  columnType: ColumnType\n}\n\n/**\n * Returns a list of glide-data-grid compatible columns based on a Quiver instance.\n */\nexport function getColumns(element: Quiver): GridColumnWithCellTemplate[] {\n  const columns: GridColumnWithCellTemplate[] = []\n\n  if (element.isEmpty()) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push({\n      id: `empty-index`,\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(ColumnType.Text, true, \"faded\")\n      },\n      columnType: ColumnType.Text,\n    } as GridColumnWithCellTemplate)\n    return columns\n  }\n\n  const numIndices = element.types?.index?.length ?? 0\n  const numColumns = element.columns?.[0]?.length ?? 0\n\n  for (let i = 0; i < numIndices; i++) {\n    const quiverType = element.types.index[i]\n    const columnType = determineColumnType(quiverType)\n    columns.push({\n      id: `index-${i}`,\n      // Indices currently have empty titles:\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true, \"faded\")\n      },\n      columnType,\n    } as GridColumnWithCellTemplate)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const columnTitle = element.columns[0][i]\n\n    const quiverType = element.types.data[i]\n    const columnType = determineColumnType(quiverType)\n\n    columns.push({\n      id: `column-${columnTitle}-${i}`,\n      title: columnTitle,\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true)\n      },\n      columnType,\n    } as GridColumnWithCellTemplate)\n  }\n  return columns\n}\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n */\nfunction updateSortingHeader(\n  columns: GridColumnWithCellTemplate[],\n  sort: ColumnSortConfig | undefined\n): GridColumnWithCellTemplate[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataLoaderReturn = { numRows: number; numIndices: number } & Pick<\n  DataEditorProps,\n  \"columns\" | \"getCellContent\" | \"onColumnResize\"\n>\n\n/**\n * A custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n * And features that influence the data representation and column configuration\n * such as column resizing, sorting, etc.\n */\nexport function useDataLoader(\n  element: Quiver,\n  sort?: ColumnSortConfig | undefined\n): DataLoaderReturn {\n  // The columns with the corresponding empty template for every type:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const columns = getColumns(element).map(column => {\n    // Apply column widths from state\n    if (column.id && columnSizes.has(column.id)) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n      } as GridColumnWithCellTemplate\n    }\n    return column\n  })\n\n  // Number of rows of the table minus 1 for the header row:\n  const numRows = element.isEmpty() ? 1 : element.dimensions.rows - 1\n  const numIndices = element.types?.index?.length ?? 0\n\n  const onColumnResize = React.useCallback(\n    (column: GridColumn, newSize: number) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSize))\n      }\n    },\n    [columns]\n  )\n\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (element.isEmpty()) {\n        return {\n          ...getCellTemplate(ColumnType.Text, true, \"faded\"),\n          displayData: \"empty\",\n        } as GridCell\n      }\n\n      if (col > columns.length - 1) {\n        // This should never happen\n        return getCellTemplate(ColumnType.Text, true)\n      }\n\n      const cellTemplate = columns[col].getTemplate()\n      if (row > numRows - 1) {\n        // This should never happen\n        return cellTemplate\n      }\n      try {\n        // Quiver has the header in first row\n        const quiverCell = element.getCell(row + 1, col)\n        return fillCellTemplate(cellTemplate, quiverCell, element.cssStyles)\n      } catch (error) {\n        // This should not happen in read-only table.\n        logError(error)\n        return cellTemplate\n      }\n    },\n    [columns, numRows, element]\n  )\n\n  const { getCellContent: getCellContentSorted } = useColumnSort({\n    columns,\n    getCellContent,\n    rows: numRows,\n    sort,\n  })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  return {\n    numRows,\n    numIndices,\n    columns: updatedColumns,\n    getCellContent: getCellContentSorted,\n    onColumnResize,\n  }\n}\nexport interface DataFrameProps {\n  element: Quiver\n  height?: number\n  width: number\n}\n\nfunction DataFrame({\n  element,\n  height: propHeight,\n  width: propWidth,\n}: DataFrameProps): ReactElement {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const {\n    numRows,\n    numIndices,\n    columns,\n    getCellContent,\n    onColumnResize,\n  } = useDataLoader(element, sort)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n  })\n\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n\n  const onHeaderClick = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = columns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: clickedColumn,\n        direction: sortDirection,\n        mode: getColumnSortMode(\n          (clickedColumn as GridColumnWithCellTemplate).columnType\n        ),\n      } as ColumnSortConfig)\n    },\n    [sort, columns]\n  )\n\n  // Automatic table height calculation: numRows +1 because of header, and +3 pixels for borders\n  let maxHeight = Math.max((numRows + 1) * ROW_HEIGHT + 3, MIN_TABLE_HEIGHT)\n  let height = Math.min(maxHeight, 400)\n\n  if (propHeight) {\n    // User has explicitly configured a height\n    height = Math.max(propHeight, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(propHeight, maxHeight)\n  }\n\n  return (\n    <ThemedDataFrameContainer\n      width={propWidth}\n      height={height}\n      minHeight={MIN_TABLE_HEIGHT}\n      maxHeight={maxHeight}\n      minWidth={MIN_TABLE_WIDTH}\n      maxWidth={propWidth}\n      onBlur={() => {\n        // If the container loses focus, clear the current selection\n        if (!isFocused) {\n          setGridSelection({\n            columns: CompactSelection.empty(),\n            rows: CompactSelection.empty(),\n            current: undefined,\n          } as GridSelection)\n        }\n      }}\n    >\n      <GlideDataEditor\n        ref={dataEditorRef}\n        columns={columns}\n        rows={numRows}\n        minColumnWidth={MIN_COLUMN_WIDTH}\n        maxColumnWidth={MAX_COLUMN_WIDTH}\n        rowHeight={ROW_HEIGHT}\n        headerHeight={ROW_HEIGHT}\n        getCellContent={getCellContent}\n        onColumnResized={onColumnResize}\n        // Freeze all index columns:\n        freezeColumns={numIndices}\n        smoothScrollX={true}\n        // Only activate smooth mode for vertical scrolling for large tables:\n        smoothScrollY={numRows < 100000}\n        // Show borders between cells:\n        verticalBorder={true}\n        // Activate copy to clipboard functionality:\n        getCellsForSelection={true}\n        // Deactivate row markers and numbers:\n        rowMarkers={\"none\"}\n        // Deactivate selections:\n        rangeSelect={\"rect\"}\n        columnSelect={\"none\"}\n        rowSelect={\"none\"}\n        // Activate search:\n        keybindings={{ search: true }}\n        // Header click is used for column sorting:\n        onHeaderClicked={onHeaderClick}\n        gridSelection={gridSelection}\n        onGridSelectionChange={(newSelection: GridSelection) => {\n          setGridSelection(newSelection)\n        }}\n        onMouseMove={(args: GridMouseEventArgs) => {\n          // Determine if the dataframe is focused or not\n          if (args.kind === \"out-of-bounds\" && isFocused) {\n            setIsFocused(false)\n          } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n            setIsFocused(true)\n          }\n        }}\n        experimental={{\n          // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n          scrollbarWidthOverride: 1,\n        }}\n      />\n    </ThemedDataFrameContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"sourceRoot":""}